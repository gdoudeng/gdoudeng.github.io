<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git-submodule使用指南</title>
    <link href="/2022/02/27/git-submodule%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <url>/2022/02/27/git-submodule%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<blockquote><p>起因是这样的，有时候我们的项目中又使用到了另外一个项目，说白点就是就是一个git项目中包含了其他子git项目。</p></blockquote><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><p>假设我们有两个及以上项目，一个叫<code>notebook</code>，一个叫<code>loho-docs</code>，<code>notebook</code>是主工程，<code>loho-docs</code>是子模块工程。我们希望在<code>notebook</code>中添加<code>loho-docs</code>，而又保持<code>loho-docs</code>的独立版本控制。</p><h2 id="创建submodule"><a href="#创建submodule" class="headerlink" title="创建submodule"></a>创建<code>submodule</code></h2><p>使用 <code>git submodule add &lt;submodule_url&gt; &lt;project_name&gt;</code> 命令可以在项目中创建一个子模块</p><p>在<code>notebook</code>的根目录下执行如下命令</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">git submodule add https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>loho-docs loho-docs<br></code></pre></div></td></tr></table></figure><p>这时候，项目仓库中就会多出两个文件：<code>.gitmodules</code> 和 <code>loho-docs</code></p><p><img src="https://picture-transmission.iplus-studio.top/uPic/L7ojjt.png" alt="L7ojjt"></p><p><code>.gitmodules</code>的信息</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">[submodule <span class="hljs-string">&quot;loho-docs&quot;</span>]<br>path = loho-docs<br>url = https:<span class="hljs-regexp">//gi</span>tee.com<span class="hljs-regexp">/xxx/</span>loho-docs<br></code></pre></div></td></tr></table></figure><p>然后提交一下<code>commit</code>，提交到远程看一下效果。</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs maxima">git commit -am <span class="hljs-string">&quot;增加文档子模块&quot;</span> <br>git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> master<br></code></pre></div></td></tr></table></figure><p>此时再看<code>git</code>库，这里的<code>loho-docs</code>文件夹，点击会跳到<code>loho-docs</code>的git库，至此<code>submodule</code>添加成功。</p><p><img src="https://picture-transmission.iplus-studio.top/uPic/TZL33p.png" alt="TZL33p"></p><p>注意此时用<code>git clone</code> 拉取 <code>notebook</code>项目是不带 <code>submodule</code> 代码的。需要再执行</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">git <span class="hljs-keyword">submodule </span>init<br>git <span class="hljs-keyword">submodule </span>update<br></code></pre></div></td></tr></table></figure><p>则会根据主项目的配置信息(<code>.gitmodules</code>)，拉取更新子模块中的代码。</p><h2 id="更新submodule"><a href="#更新submodule" class="headerlink" title="更新submodule"></a>更新<code>submodule</code></h2><p>如果我们在主项目和子项目做了修改的话，他其实是分开commit的，可以分开提交。</p><p><img src="https://picture-transmission.iplus-studio.top/uPic/RSEXPO.png" alt="RSEXPO"></p><h2 id="删除submodule"><a href="#删除submodule" class="headerlink" title="删除submodule"></a>删除<code>submodule</code></h2><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>  修改 .git/config ，删除 loho-docs 文件下所有的代码<br>git submodule deinit loho-docs<br><br><span class="hljs-regexp">//</span>  .gitmodule 文件内容清空，删除 Water 文件夹<br>git rm Water<br><span class="hljs-regexp">//</span>  提交代码<br>git commit -m <span class="hljs-string">&quot;rm Water&quot;</span><br><span class="hljs-regexp">//</span>  推到远程<br>git push origin master<br></code></pre></div></td></tr></table></figure><p>此时子模块就会被删除。</p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装php5.6等被brew弃用的php版本</title>
    <link href="/2021/10/14/Mac%E5%AE%89%E8%A3%85php5-6%E7%AD%89%E8%A2%ABbrew%E5%BC%83%E7%94%A8%E7%9A%84php%E7%89%88%E6%9C%AC/"/>
    <url>/2021/10/14/Mac%E5%AE%89%E8%A3%85php5-6%E7%AD%89%E8%A2%ABbrew%E5%BC%83%E7%94%A8%E7%9A%84php%E7%89%88%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考文章：<a href="https://getgrav.org/blog/macos-bigsur-apache-multiple-php-versions">https://getgrav.org/blog/macos-bigsur-apache-multiple-php-versions</a></p></blockquote><h1 id="brew已经弃用5-6版本"><a href="#brew已经弃用5-6版本" class="headerlink" title="brew已经弃用5.6版本"></a><code>brew</code>已经弃用5.6版本</h1><p>截止到2021年10月14日，现在<code>brew</code>只能安装如下<code>php</code>版本</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-10-14_19-31-06.png"></p><h1 id="添加源"><a href="#添加源" class="headerlink" title="添加源"></a>添加源</h1><p>网上最多的就是添加</p><p><code>brew tap exolnet/homebrew-deprecated</code></p><p>但是这东西在我电脑上跑就是报错。</p><p>我这里推荐另外一个源</p><p><code>brew tap shivammathur/php</code></p><h1 id="安装旧版本PHP"><a href="#安装旧版本PHP" class="headerlink" title="安装旧版本PHP"></a>安装旧版本<code>PHP</code></h1><p>我们将继续安装各种版本的 PHP，并根据需要使用一个简单的脚本在它们之间切换。随意排除您不想安装的任何版本。</p><p>搜索可用的php版本</p><p><code>brew search php</code> </p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-10-14_19-34-58.png"></p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">brew install shivammathur/php/php@5.6<br>brew install shivammathur/php/php@7.0<br>brew install shivammathur/php/php@7.1<br>brew install shivammathur/php/php@7.2<br>brew install shivammathur/php/php@7.3<br>brew install shivammathur/php/php@7.4<br>brew install shivammathur/php/php@8.0<br></code></pre></div></td></tr></table></figure><p>此外，您可能需要根据需要调整 PHP 的配置设置。一个常见的改变是内存设置或date.timezone配置。php.ini每个 PHP 版本的文件位于以下目录中</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/etc/php/5.6/php.ini<br>/usr/<span class="hljs-built_in">local</span>/etc/php/7.0/php.ini<br>/usr/<span class="hljs-built_in">local</span>/etc/php/7.1/php.ini<br>/usr/<span class="hljs-built_in">local</span>/etc/php/7.2/php.ini<br>/usr/<span class="hljs-built_in">local</span>/etc/php/7.3/php.ini<br>/usr/<span class="hljs-built_in">local</span>/etc/php/7.4/php.ini<br>/usr/<span class="hljs-built_in">local</span>/etc/php/8.0/php.ini<br></code></pre></div></td></tr></table></figure><h1 id="brew-php-switcher是什么"><a href="#brew-php-switcher是什么" class="headerlink" title="brew-php-switcher是什么"></a><code>brew-php-switcher</code>是什么</h1><p><code>brew-php-switcher</code>是一个<code>php</code>环境版本切换工具，对通过<code>brew</code>安装的<code>php</code>版本进行切换。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>brew brew-php-switcher install</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>brew-php-switcher 5.6</code></p><blockquote><p>此时，我强烈建议关闭<strong>所有终端选项卡和窗口</strong>。这将意味着打开一个新终端以继续下一步。强烈建议这样做，因为现有终端可能会出现一些非常奇怪的路径问题（相信我，我已经看到了！）。</p></blockquote><h2 id="切换成功"><a href="#切换成功" class="headerlink" title="切换成功"></a>切换成功</h2><p>关闭所有终端窗口后再查看php版本</p><p><code>php -v</code></p><p>切换服务还可以看这 <a href="https://newsn.net/say/mac-php-switch.html">https://newsn.net/say/mac-php-switch.html</a></p>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可选链操作符与空值合并运算符</title>
    <link href="/2021/09/16/%E5%8F%AF%E9%80%89%E9%93%BE%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8E%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2021/09/16/%E5%8F%AF%E9%80%89%E9%93%BE%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B8%8E%E7%A9%BA%E5%80%BC%E5%90%88%E5%B9%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="可选链操作符"><a href="#可选链操作符" class="headerlink" title="可选链操作符"></a>可选链操作符</h1><p>可选链操作符( <code>?.</code> )允许读取位于连接对象链深处的属性的值，而不必明确验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为空( <code>nullish</code> ) (<code>null</code> 或者 <code>undefined</code>) 的情况下不会引起错误，该表达式短路返回值是 <code>undefined</code>。与函数调用一起使用时，如果给定的函数不存在，则返回 <code>undefined</code>。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> adventurer = &#123;<br>  name: <span class="hljs-string">&#x27;Alice&#x27;</span>,<br>  cat: &#123;<br>    name: <span class="hljs-string">&#x27;Dinah&#x27;</span><br>  &#125;<br>&#125;;<br><br><span class="hljs-comment">// 可选链和表达式</span><br><span class="hljs-keyword">const</span> dogName = adventurer.dog?.name;<br><span class="hljs-built_in">console</span>.log(dogName);<br><span class="hljs-comment">// expected output: undefined</span><br><br><span class="hljs-comment">// 可选链与函数调用</span><br><span class="hljs-built_in">console</span>.log(adventurer.someNonExistentMethod?.());<br><span class="hljs-comment">// expected output: undefined</span><br></code></pre></div></td></tr></table></figure><p>用可选链操作符去操作就不会直接报错</p><ul><li>避免使用一堆 <code>&amp;&amp;</code> 操作符</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">// 之前你是这么操作的</span><br><span class="hljs-keyword">const</span> &#123; foo = &#123;&#125; &#125; = props.obj;<br><br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;foo.count &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Count</span>/&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><br><span class="hljs-comment">// 现在可以这样操作</span><br><span class="hljs-keyword">const</span> &#123; foo = &#123;&#125; &#125; = props.obj;<br><br><span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;props?.obj?.foo?.count &amp;&amp; <span class="hljs-tag">&lt;<span class="hljs-name">Count</span>/&gt;</span>&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><ul><li>连用可选链操作符</li></ul><p>可以连续使用可选链读取多层嵌套结构</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> customer = &#123;<br>  name: <span class="hljs-string">&quot;Carl&quot;</span>,<br>  details: &#123;<br>    age: <span class="hljs-number">82</span>,<br>    location: <span class="hljs-string">&quot;Paradise Falls&quot;</span> <span class="hljs-comment">// details 的 address 属性未有定义</span><br>  &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> customerCity = customer.details?.address?.city;<br><br><span class="hljs-comment">// … 可选链也可以和函数调用一起使用</span><br><span class="hljs-keyword">let</span> duration = vacations.trip?.getTime?.();<br></code></pre></div></td></tr></table></figure><h1 id="空值合并操作符"><a href="#空值合并操作符" class="headerlink" title="空值合并操作符"></a>空值合并操作符</h1><p>空值合并操作符（<code>??</code>）是一个逻辑操作符，当左侧的操作数为 <code>null</code> 或者 <code>undefined</code> 时，返回其右侧操作数，否则返回左侧操作数。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> customer = &#123;<br>  name: <span class="hljs-string">&quot;Carl&quot;</span>,<br>  details: &#123; <span class="hljs-attr">age</span>: <span class="hljs-number">82</span> &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> customerCity = customer?.city ?? <span class="hljs-string">&quot;暗之城&quot;</span>;<br><span class="hljs-built_in">console</span>.log(customerCity); <span class="hljs-comment">// “暗之城”</span><br></code></pre></div></td></tr></table></figure><p>与逻辑或操作符（<code>||</code>）不同，逻辑或操作符会在左侧操作数为假值时返回右侧操作数。也就是说，如果使用 <code>||</code> 来为某些变量设置默认值，可能会遇到意料之外的行为。比如为假值（例如，<code>&#39;&#39;</code> 或 <code>0</code>）时。见下面的例子。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> foo = <span class="hljs-literal">null</span> ?? <span class="hljs-string">&#x27;default string&#x27;</span>;<br><span class="hljs-built_in">console</span>.log(foo);<br><span class="hljs-comment">// expected output: &quot;default string&quot;</span><br><br><span class="hljs-keyword">const</span> baz = <span class="hljs-number">0</span> ?? <span class="hljs-number">42</span>;<br><span class="hljs-built_in">console</span>.log(baz);<br><span class="hljs-comment">// expected output: 0</span><br></code></pre></div></td></tr></table></figure><p>然而，由于 <code>||</code> 是一个布尔逻辑运算符，左侧的操作数会被强制转换成布尔值用于求值。任何假值（<code>0</code>， <code>&#39;&#39;</code>， <code>NaN</code>， <code>null</code>， <code>undefined</code>）都不会被返回。这导致如果你使用<code>0</code>，<code>&#39;&#39;</code>或<code>NaN</code>作为有效值，就会出现不可预料的后果。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">let</span> text = <span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-keyword">let</span> qty = count || <span class="hljs-number">42</span>;<br><span class="hljs-keyword">let</span> message = text || <span class="hljs-string">&quot;hi!&quot;</span>;<br><span class="hljs-built_in">console</span>.log(qty);     <span class="hljs-comment">// 42，而不是 0</span><br><span class="hljs-built_in">console</span>.log(message); <span class="hljs-comment">// &quot;hi!&quot;，而不是 &quot;&quot;</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode调试任意系统版本的真机</title>
    <link href="/2021/08/09/Xcode%E8%B0%83%E8%AF%95%E4%BB%BB%E6%84%8F%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E7%9A%84%E7%9C%9F%E6%9C%BA/"/>
    <url>/2021/08/09/Xcode%E8%B0%83%E8%AF%95%E4%BB%BB%E6%84%8F%E7%B3%BB%E7%BB%9F%E7%89%88%E6%9C%AC%E7%9A%84%E7%9C%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<ul><li>先去下载支持最新的真机调试包</li></ul><p>链接: <a href="https://pan.baidu.com/s/1FuulpHoaEe0t8yAYr-uxnA">https://pan.baidu.com/s/1FuulpHoaEe0t8yAYr-uxnA</a> 密码: 1wsw</p><p>那个包是跟随xcode的版本存在的 不升级没有 要不就去网上找</p><ul><li>把包放在这个目录下</li></ul><p><code>/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/DeviceSupport</code></p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG579.png"></p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git忽略已经被提交的文件</title>
    <link href="/2021/08/06/git%E5%BF%BD%E7%95%A5%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <url>/2021/08/06/git%E5%BF%BD%E7%95%A5%E5%B7%B2%E7%BB%8F%E8%A2%AB%E6%8F%90%E4%BA%A4%E7%9A%84%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>有时候你会发现，一些build目录 自动生成的文件不小心被你提交并且推送到了远程仓库，此时你去修改gitignore文件就会于事无补。</p><ul><li>正确姿势：</li></ul><p>单个文件<br><code>git rm --cached logs/xx.log</code>，</p><p>文件夹<br><code>git rm -r --cached unpackage/*</code></p><p>然后更新 <code>.gitignore</code> 忽略掉目标文件，</p><p>最后 <code>git commit -m &quot;忽略此文件&quot;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Xcode证书签名</title>
    <link href="/2021/06/29/Xcode%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D/"/>
    <url>/2021/06/29/Xcode%E8%AF%81%E4%B9%A6%E7%AD%BE%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<p>一般来说Xcode自动签名已经足够了，当时由于以前的过失把一个已经申请好的证书私钥给搞没了，换到新电脑的时候由于没有私钥，原本的证书已经无法使用了，Xcode提示我<code>Revoke certificate</code>，但是你这么操作后原本安装了app的用户就没办法打开app了，这不等于自杀嘛，还好当时还有一次申请证书的权限（一共可以申请两次证书），证书与你电脑的私钥.p12是绑定的，所以没事不要重装系统，你要重装也要确保在另一台电脑已经配置好了，可以上传app到AppStore了。</p><p>参考文章：<a href="https://zhuanlan.zhihu.com/p/69162456">https://zhuanlan.zhihu.com/p/69162456</a></p><ul><li>0924更新</li></ul><p>我又发现了一篇很好的参考文章：<a href="https://ask.dcloud.net.cn/article/152">https://ask.dcloud.net.cn/article/152</a></p><h1 id="注册bundle-id"><a href="#注册bundle-id" class="headerlink" title="注册bundle id"></a>注册bundle id</h1><p>iOS的唯一标示，跟android的包名是一个意思。而且你用了以后别人是用不了的，别人也注册不了这个id，所以测试的时候最好是随便填一个无意义的bundle id。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-00-31.png"></p><p>这个没啥操作性，基本上一路<code>next</code>就行。</p><h1 id="申请证书"><a href="#申请证书" class="headerlink" title="申请证书"></a>申请证书</h1><blockquote><p>慎重操作，申请一个证书就少一个，一共只能申请两个证书。</p></blockquote><h2 id="创建CSR文件（证书请求文件）"><a href="#创建CSR文件（证书请求文件）" class="headerlink" title="创建CSR文件（证书请求文件）"></a>创建CSR文件（证书请求文件）</h2><ol><li>打开电脑上的钥匙串访问，选中证书助理</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-41-49.png"> </p><ol start="2"><li>用户电子邮件地址填开发者账号的邮箱，名称可以随意填，然后保存到磁盘上。</li><li>Keychain将生成一个包含开发者身份信息的CSR（Certificate Signing Request）文件。同时，Keychain Access-&gt;Keys（密钥）中增加一对Public/Private Key Pair。</li></ol><p>搞完就得到这么一个文件<code>CertificateSigningRequest.certSigningRequest</code></p><p>如果你电脑已经有这么一个文件了，就不用再去申请了。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-45-26.png"></p><h2 id="创建开发者证书-和-推送证书"><a href="#创建开发者证书-和-推送证书" class="headerlink" title="创建开发者证书 和 推送证书"></a>创建开发者证书 和 推送证书</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_17-46-34.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-48-18.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-48-51.png"></p><ol><li><p>一路点击<code>Continue</code>, 到<code>Generate</code>后选择一开始生成的<code>CSR文件</code>上传，然后再继续点击<code>Continue</code>。</p></li><li><p>生成完开发调试、生成调试证书 和 开发环境推送证书、生成环境推送证书，可以在<code>Certificates-&gt;All</code>中查看该证书，并进行下载或删除。</p></li><li><p>下载到桌面上，然后双击添加到钥匙串中，可在<code>Keychain Access-&gt;证书</code>中查看。</p></li></ol><p>由于我们使用友盟，生成的推送证书（开发环境和生产环境）需要从钥匙串访问中导出p12文件，添加到友盟后台。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-56-15.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-57-12.png"></p><h2 id="创建配置文件（Provisioning-Profiles）-安装到真机使用，上传AppStore也要用"><a href="#创建配置文件（Provisioning-Profiles）-安装到真机使用，上传AppStore也要用" class="headerlink" title="创建配置文件（Provisioning Profiles）(安装到真机使用，上传AppStore也要用)"></a>创建配置文件（Provisioning Profiles）(安装到真机使用，上传AppStore也要用)</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_17-42-31.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_18-59-29.png"></p><ol><li>选择刚创建的App ID,选择相应证书、选择测试的设备，然后创建名称一直点击Continue即可，最后下载下来。</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_19-00-53.png"> </p><ol start="2"><li>下载到本地。</li></ol><p><code>.mobileprovision</code>文件就是了。双击它安装。</p><h3 id="自动设置"><a href="#自动设置" class="headerlink" title="自动设置"></a>自动设置</h3><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_19-29-46.png"></p><h3 id="手动设置"><a href="#手动设置" class="headerlink" title="手动设置"></a>手动设置</h3><ol><li><p>下载到本地的<code>Provisioning Profile</code>，双击自动安装到<code>xcode</code>中，在<code>XcodeTarget-&gt;Build Settings-&gt;Code Signing-&gt;Provisioning Profile</code>中可看到此项。</p></li><li><p>如下图，选择此项配置文件，<code>Code Signing Identity</code>中会默认显示所关联的证书文件（即创建该配置文件时选择关联的证书，可有多个）。</p></li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_19-24-09.png"></p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反编译及二次打包</title>
    <link href="/2021/06/29/%E5%8F%8D%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E4%BA%8C%E6%AC%A1%E6%89%93%E5%8C%85/"/>
    <url>/2021/06/29/%E5%8F%8D%E7%BC%96%E8%AF%91%E4%BB%A5%E5%8F%8A%E4%BA%8C%E6%AC%A1%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="使用ApkTool反编译APK得到xml文件、AndroidManifest-xml和图片"><a href="#使用ApkTool反编译APK得到xml文件、AndroidManifest-xml和图片" class="headerlink" title="使用ApkTool反编译APK得到xml文件、AndroidManifest.xml和图片"></a>使用ApkTool反编译APK得到xml文件、AndroidManifest.xml和图片</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>brew install apktool</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>apktool d ez.apk</code></p><p>该命令执行后会在同级目录下生成一个与你编译的apk同名的目录</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_15-21-07.png"></p><h2 id="修改源码"><a href="#修改源码" class="headerlink" title="修改源码"></a>修改源码</h2><p><a href="https://github.com/AlexeySoshin/smali2java/tree/v1.0">smali2java</a></p><p>smali2java没有mac版的。</p><p>打开源码后，会有一些资源文件已经成了一些十六进制的代码呈现在我们眼前，这就蛋疼了，天知道这是啥呢？</p><p>路径：<code>res/values/public.xml</code></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_15-24-01.png"></p><h2 id="重新打包"><a href="#重新打包" class="headerlink" title="重新打包"></a>重新打包</h2><p>apktool b ez -o demofake.apk</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-28_21-58-38.png"></p><h2 id="重新签名"><a href="#重新签名" class="headerlink" title="重新签名"></a>重新签名</h2><p><code>jarsigner -verbose -keystore [您的私钥存放路径] -signedjar [签名后文件存放路径] [未签名的文件路径] [您的证书别名]</code></p><ul><li>完整例子</li></ul><p><code>jarsigner -verbose -keystore my-release-key.keystore -signedjar ./demofake-signed.apk ./demofake.apk my-key-alia</code></p><h1 id="dex2jar将dex反编译成jar"><a href="#dex2jar将dex反编译成jar" class="headerlink" title="dex2jar将dex反编译成jar"></a>dex2jar将dex反编译成jar</h1><h2 id="使用解压软件将apk进行解压：得到-dex文件"><a href="#使用解压软件将apk进行解压：得到-dex文件" class="headerlink" title="使用解压软件将apk进行解压：得到.dex文件"></a>使用解压软件将apk进行解压：得到.dex文件</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_15-25-46.png"></p><ul><li>将dex文件反编译成jar可读文件：</li></ul><p><code>sh d2j-dex2jar.sh classes.dex</code></p><p>通过上述命令会得到1个.jar文件</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_15-27-29.png"></p><h1 id="使用JD-GUI查看反编译后的程序源码"><a href="#使用JD-GUI查看反编译后的程序源码" class="headerlink" title="使用JD-GUI查看反编译后的程序源码"></a>使用JD-GUI查看反编译后的程序源码</h1><p>将dex转换成jar之后接下来我们就可以使用JD-GUI来查看反编译后的程序源码</p><p>将classes-dex2jar.jar拖拽到JD-GUI界面上即可</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-06-29_15-29-10.png"></p><p>这个app可以说完全的裸奔。</p><p>我没试过脱壳，加固过的我一般直接放弃不搞。所以小伙子不要怕麻烦，一定要加固。</p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>_property vs self.property</title>
    <link href="/2021/05/14/property-vs-self-property/"/>
    <url>/2021/05/14/property-vs-self-property/</url>
    
    <content type="html"><![CDATA[<p><code>SomeClass.h</code></p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs less"><span class="hljs-variable">@interface</span> <span class="hljs-attribute">SomeClass </span>: NSObject<br><br><span class="hljs-variable">@property</span> NSString *property;<br><br><span class="hljs-variable">@end</span><br></code></pre></div></td></tr></table></figure><p>实际使用中我们是可以有两种方式使用的：</p><ul><li><p><code>_property</code></p></li><li><p><code>self.property</code></p></li></ul><p>那么究竟什么时候用第一种什么时候用第二种？</p><p>一般来说你可能会在getter/setter/init/dealloc方法种用到<code>_property</code>，其他任何情况都应该是用<code>self.property</code></p><h2 id="为什么？"><a href="#为什么？" class="headerlink" title="为什么？"></a>为什么？</h2><p>因为调用<code>self.property</code>实际上是去访问了这个属性的getter方法，如果是<code>self.property = @&quot;something&quot;</code>则是去调用这个属性的setter方法。</p><p>而<code>_property</code>则是直接访问这个变量。</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">- (<span class="hljs-keyword">Type</span>)<span class="hljs-keyword">property</span><span class="hljs-title"></span>&#123;<br>    return <span class="hljs-number">2</span>*_property;<br>&#125;<br><br>// <span class="hljs-keyword">AND</span>/<span class="hljs-keyword">OR</span><br><br>- (void)setProperty:(<span class="hljs-keyword">Type</span>)<span class="hljs-keyword">property</span><span class="hljs-title"></span><br>&#123;<br>    _property = <span class="hljs-number">2</span>*<span class="hljs-keyword">property</span><span class="hljs-title"></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>所以如果有复写这个属性的getter方法和setter方法，那么<code>_property</code>和<code>self.property</code>就会变得不同。</p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RN版百度语音识别与一个UI组件</title>
    <link href="/2021/03/06/RN%E7%89%88%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E4%B8%8E%E4%B8%80%E4%B8%AAUI%E7%BB%84%E4%BB%B6-Dialog%E5%92%8CToast/"/>
    <url>/2021/03/06/RN%E7%89%88%E7%99%BE%E5%BA%A6%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%AB%E4%B8%8E%E4%B8%80%E4%B8%AAUI%E7%BB%84%E4%BB%B6-Dialog%E5%92%8CToast/</url>
    
    <content type="html"><![CDATA[<h1 id="预告"><a href="#预告" class="headerlink" title="预告"></a>预告</h1><p>好久没跟新过，因为根本没时间了，目前在赶一个项目</p><p>本次项目完成后将开源两个组件库，一个是<code>RN</code>版百度语音识别，另一个是<code>UI</code>组件，</p><p><code>Dialog</code>和<code>Toast</code>，Toast其实就是基于<code>react-native-root-toast</code>的，看到这个库使用api的形式展现toast，非常好用，</p><p>然后搞了一个对话框也是基于api形式进行展现。</p><h1 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h1><ul><li>基于api形式进行展现。</li></ul><p>预告图</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-06_18-19-04.png"></p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">interface</span> DialogOptions &#123;<br>  title?: <span class="hljs-built_in">string</span>,<br>  description?: <span class="hljs-built_in">string</span>,<br>  okText?: <span class="hljs-built_in">string</span>,<br>  cancelText?: <span class="hljs-built_in">string</span>,<br>  onOKPress?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  onCancelPress?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  onDismiss?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  destroyDialog?: <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">void</span>;<br>  contentView?: React.ElementType;<br>  okTextColor?: <span class="hljs-built_in">string</span>;<br>  cancelTextColor?: <span class="hljs-built_in">string</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用：</p><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript">Tips.showDialog(TipsType.confirm, &#123;<br>      onCancelPress: <span class="hljs-built_in">this</span>.handleCancelSavePress,<br>      onOKPress: <span class="hljs-built_in">this</span>.handleSavePress,<br>      description: <span class="hljs-string">&quot;是否修改保存？&quot;</span>,<br>      okText: <span class="hljs-string">&quot;保存&quot;</span>,<br>      cancelText: <span class="hljs-string">&quot;不保存&quot;</span><br>    &#125;);<br></code></pre></div></td></tr></table></figure><p>基本上自定义啥<code>props</code>都行，后面可以改。</p><p>其实也是基于其他开源进行改造的，我发现我改完后会与<code>react-native-root-toast</code>冲突，所以干脆合在一起了。</p><h1 id="RN版百度语音识别"><a href="#RN版百度语音识别" class="headerlink" title="RN版百度语音识别"></a>RN版百度语音识别</h1><p>目前看到这两个库</p><ul><li><p><a href="https://github.com/sinooceanland/react-native-speech-iflytek-sino">react-native-speech-iflytek-sino</a></p></li><li><p><a href="https://github.com/zphhhhh/react-native-speech-iflytek">react-native-speech-iflytek</a></p></li></ul><p>现在看到这两个库，把这两个库有的功能利用<a href="https://ai.baidu.com/ai-doc/SPEECH/Ek39uxgre">百度语音识别</a>实现。</p><h1 id="开源"><a href="#开源" class="headerlink" title="开源"></a>开源</h1><p>项目结束后会开源这两个库，可以关注我 <a href="https://github.com/gdoudeng">github</a> 和 <a href="https://gitee.com/gdoudeng">gitee</a> ，我也会在这里说。</p><p>百度语音已经开源了，另外一个UI库看时间安排上。</p><h1 id="react-native-baidu-asr"><a href="#react-native-baidu-asr" class="headerlink" title="react-native-baidu-asr"></a><code>react-native-baidu-asr</code></h1><p><a href="https://github.com/gdoudeng/react-native-baidu-asr">react-native-baidu-asr</a> 是一个 React Native 下的百度语音库，可以进行语音识别以及语音唤醒。</p>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2021年最新注册苹果开发者账号</title>
    <link href="/2021/01/19/2021%E5%B9%B4%E6%9C%80%E6%96%B0%E6%B3%A8%E5%86%8C%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/"/>
    <url>/2021/01/19/2021%E5%B9%B4%E6%9C%80%E6%96%B0%E6%B3%A8%E5%86%8C%E8%8B%B9%E6%9E%9C%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="创建Apple-ID"><a href="#创建Apple-ID" class="headerlink" title="创建Apple ID"></a>创建Apple ID</h1><p><a href="https://appleid.apple.com/">appleid.apple.com</a></p><p>注册Apple ID是比较简单的，没啥好说。</p><p>新注册的号先在App Store登陆一次。然后要开启<a href="https://support.apple.com/zh-cn/HT204915">双重验证</a> ，不然后面有坑你踩。</p><h2 id="申请-D-U-N-S"><a href="#申请-D-U-N-S" class="headerlink" title="申请 D-U-N-S"></a>申请 D-U-N-S</h2><p><a href="https://developer.apple.com/support/D-U-N-S/">D-U-N-S</a></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-19_09-35-14.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-19_09-36-02.png"></p><p><strong>注意！法人实体名称是填公司英文名！</strong></p><h3 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h3><blockquote><p>出处<a href="https://www.php.cn/blog/detail/26323.html">原文</a></p></blockquote><p>我按照要求填好资料，每次都提示：</p><p>您的要求未能完成。我们暂时未能完成您需创建 D-U-N-S 编号的要求。</p><ul><li><a href="https://www.huaxiadnb.com/duns-registered-solution/standard-duns-apply.html">走国内华夏邓白氏渠道</a></li></ul><p>提交后，会有客服电话联系你，说明加急三天需要花上800元，免费的一个月左右。</p><p>你直接说走免费渠道就行，其实顶多几天就会收到邮件，按照邮件提供资料即可</p><ul><li><a href="https://developer.apple.com/contact/topic/select">走苹果官方渠道协助申请</a></li></ul><p>速度很快，会立即收到邮件</p><h1 id="注册公司资质的苹果开发者账号"><a href="#注册公司资质的苹果开发者账号" class="headerlink" title="注册公司资质的苹果开发者账号"></a>注册公司资质的苹果开发者账号</h1><p>以前是在网页上注册的 <a href="https://developer.apple.com/enroll/app">enroll</a> ，现在都让你去app注册</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-19_09-22-54.png"></p><h2 id="安装-Apple-Developer"><a href="#安装-Apple-Developer" class="headerlink" title="安装 Apple Developer"></a>安装 Apple Developer</h2><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG13.jpeg"></p><p>第一个就是</p><h2 id="到Apple-Developer填写资料"><a href="#到Apple-Developer填写资料" class="headerlink" title="到Apple Developer填写资料"></a>到Apple Developer填写资料</h2><p>登录苹果账号后，点击现在注册进入，一直点继续！</p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG14.jpeg"></p><h3 id="输入申请人姓名、身份证号、电话-（中文输入，一定要写真实的）"><a href="#输入申请人姓名、身份证号、电话-（中文输入，一定要写真实的）" class="headerlink" title="输入申请人姓名、身份证号、电话 （中文输入，一定要写真实的）"></a>输入申请人姓名、身份证号、电话 <strong>（中文输入，一定要写真实的）</strong></h3><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG15.jpeg"></p><ol><li><p>已经申请过开发者账号的个人身份信息，不能再申请了，必须换人申请。</p></li><li><p>已经申请过开发者账号的设备(iphone、ipad等)，不能再申请了，必须换设备申请。</p></li></ol><h3 id="用拼音或者英文，对应写下姓名、地址"><a href="#用拼音或者英文，对应写下姓名、地址" class="headerlink" title="用拼音或者英文，对应写下姓名、地址"></a>用拼音或者英文，对应写下姓名、地址</h3><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG16.jpeg"></p><p><a href="https://www.youbianku.com/">查邮编</a></p><p>我在这里就试过街道地址一直给我提示不对的，最后我输入了另外一个地址。。。终于识别到了，真的不知道他怎么识别的</p><h3 id="实体类型"><a href="#实体类型" class="headerlink" title="实体类型"></a>实体类型</h3><p>我这里选择组织类型，即公司</p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG42.jpeg"></p><h3 id="输入邓白氏码"><a href="#输入邓白氏码" class="headerlink" title="输入邓白氏码"></a>输入邓白氏码</h3><p>上面申请过的，但是那个地址填的真的迷惑。。。</p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG41.jpeg"></p><h2 id="这里要填一个官网地址"><a href="#这里要填一个官网地址" class="headerlink" title="这里要填一个官网地址"></a>这里要填一个官网地址</h2><p>需要一个备案过的域名，且域名主体是您公司的才行</p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG43.png"></p><h3 id="最后邮箱会收到邮件"><a href="#最后邮箱会收到邮件" class="headerlink" title="最后邮箱会收到邮件"></a>最后邮箱会收到邮件</h3><p>等待审核，会打电话给你，问题一定要好好回答，不然一不小心就给你拒绝了，问你是不是公司的员工，你就说是！！！</p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG44.png"></p><p>后面的有什么问题都会通过电话或者邮箱联系，看着办就是了</p><h3 id="给钱"><a href="#给钱" class="headerlink" title="给钱"></a>给钱</h3><p>这次申请开发者账号的速度快到令我震惊，昨天申请的，今天就搞定了。。。</p><p>我觉得是因为申请的时候什么都准备好了，邓白氏码一查发现有了，域名本来有了，官网也本来就有了，直接填，而且都符合要求，官网不会太简单而被拒绝，不会因为访问不到而拒绝，不会因为等待域名备案而等半个月。。。天时地利人和。。。</p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG46.jpeg"></p><p><img src="https://picture-transmission.iplus-studio.top/WechatIMG45.jpeg"></p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React Native双端打包</title>
    <link href="/2021/01/10/React-Native%E5%8F%8C%E7%AB%AF%E6%89%93%E5%8C%85/"/>
    <url>/2021/01/10/React-Native%E5%8F%8C%E7%AB%AF%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>首先，我觉得官网就说的很详细很好，我贴一下网址，</p><p><a href="https://reactnative.cn/docs/signed-apk-android">中文的</a></p><p><a href="https://reactnative.dev/docs/signed-apk-android">英文的</a></p><p>官网说的非常好，我不重复了，我贴一下常用代码</p><ul><li>生成app密钥</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">keytool -genkeypair -v -keystore my-upload-key.keystore -<span class="hljs-built_in">alias</span> my-key-alias -keyalg RSA -keysize 2048 -validity 10000<br></code></pre></div></td></tr></table></figure><p>生产的 <code>key</code> 放到 <code>app</code> 目录下</p><h2 id="生成发行-APK-包"><a href="#生成发行-APK-包" class="headerlink" title="生成发行 APK 包"></a>生成发行 APK 包</h2><p>只需在终端中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> android<br>$ ./gradlew assembleRelease<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> android<br>$ ./gradlew bundleRelease<br></code></pre></div></td></tr></table></figure><p>在0.60之前的版本都是用第一种命令的，到0.60之后就有了第二种打包命令，但是我发现继续用第一种也没啥问题。</p><h1 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h1><p>这个官网也有提及，但是我觉得作用不大</p><p><a href="https://reactnative.cn/docs/publishing-to-app-store">传送门</a></p><h2 id="1-导出-js-bundle-包和图片资源"><a href="#1-导出-js-bundle-包和图片资源" class="headerlink" title="1. 导出 js bundle 包和图片资源"></a>1. 导出 <code>js bundle</code> 包和图片资源</h2><p>和打包 <code>React Native Android</code> 应用不同的是，我们无法通过命令一步进行导出 <code>React Native iOS</code> 应用。我们需要将<code>JS</code>部分的代码和图片资源等打包导出，然后通过<code>XCode</code>将其添加到<code>iOS</code><br>项目中。</p><ul><li>导出<code>js bundle</code>的命令</li></ul><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs jboss-cli">react-native bundle <span class="hljs-params">--platform</span> ios <span class="hljs-params">--entry-file</span> index.js <span class="hljs-params">--bundle-output</span> <span class="hljs-string">./bundles/main.jsbundle</span> <span class="hljs-params">--assets-dest</span>  <span class="hljs-string">./bundles</span> <span class="hljs-params">--dev</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p>一般来说，不会每次都运行这么长都命令，所以我们都是将其添加到package.json文件中，</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;android&quot;</span>: <span class="hljs-string">&quot;react-native run-android&quot;</span>,<br>    <span class="hljs-attr">&quot;ios&quot;</span>: <span class="hljs-string">&quot;react-native run-ios&quot;</span>,<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-native start&quot;</span>,<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;jest&quot;</span>,<br>    <span class="hljs-attr">&quot;bundle-ios&quot;</span>: <span class="hljs-string">&quot;react-native bundle --platform ios --entry-file index.js --bundle-output ./bundles/main.jsbundle --assets-dest  ./bundles --dev false&quot;</span>,<br>    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;eslint .&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>运行命令之前先要在项目根目录建一个文件夹 <code>bundles</code></p><p>然后就可以在项目根目录下运行 <code>yarn bundle-ios</code></p><h2 id="2-将-js-bundle-包和图片资源导入到iOS项目中"><a href="#2-将-js-bundle-包和图片资源导入到iOS项目中" class="headerlink" title="2. 将 js bundle 包和图片资源导入到iOS项目中"></a>2. 将 <code>js bundle</code> 包和图片资源导入到<code>iOS</code>项目中</h2><p>这一步我们需要用到<code>XCode</code>，选择<code>assets</code>文件夹与<code>main.jsbundle</code>文件将其拖拽到<code>XCode</code>的项目导航面板中即可。</p><p>在<code>Xcode</code>中添加资源到项目中，必须使用<code>Create folder references</code>的方式(也就是文件夹的方式)添加<code>bundle</code>文件夹。</p><p>必须使用<code>Create folder references</code>的方式添加！</p><p><img src="https://picture-transmission.iplus-studio.top/714.png"></p><ul><li>添加成功后<code>bundle</code>文件夹为蓝色（如下图）</li></ul><p><img src="https://picture-transmission.iplus-studio.top/imag52e.png"></p><h2 id="3-修改AppDelegate-m文件"><a href="#3-修改AppDelegate-m文件" class="headerlink" title="3. 修改AppDelegate.m文件"></a>3. 修改<code>AppDelegate.m</code>文件</h2><p>修改<code>AppDelegate.m</code>文件，添加如下代码：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge<br>&#123;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> DEBUG  </span><br>   <span class="hljs-keyword">return</span> [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@<span class="hljs-string">&quot;index&quot;</span> fallbackResource:nil];<br><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span>   </span><br>   <span class="hljs-comment">// 没有使用CodePush热更新的情况</span><br>   <span class="hljs-keyword">return</span> [[NSBundle mainBundle] URLForResource:@<span class="hljs-string">&quot;main&quot;</span> withExtension:@<span class="hljs-string">&quot;jsbundle&quot;</span>];<br>   <span class="hljs-comment">// 如果在项目中使用了CodePush热更新，那么我们需要就可以直接通过CodePush来读取本地的jsbundle，方法如下： For React Native &gt;=0.59,https://github.com/microsoft/react-native-code-push/blob/master/docs/setup-ios.md</span><br>   <span class="hljs-comment">// return [CodePush bundleURL];</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span> </span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>上述代码的作用是让<code>React Native</code>去使用我们刚才导入的<code>jsbundle</code>，这样以来我们就摆脱了对本地<code>nodejs</code>服务器的依赖。</p><p>到目前为止呢，我们已经将<code>js bundle</code>包和图片资源导入到<code>iOS</code>项目中，接下来我们就可以发布我们的<code>iOS</code>应用了。</p><p><code>RN</code> 应用和纯<code>iOS</code>应用打包唯一不同的是上面两步，按照这个教程执行完第二步，剩下的步骤就和<code>iOS</code>正常<code>APP</code>打包一样了</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-50-48.png"></p><h1 id="安卓友盟统计-多渠道打包"><a href="#安卓友盟统计-多渠道打包" class="headerlink" title="安卓友盟统计+多渠道打包"></a>安卓友盟统计+多渠道打包</h1><blockquote><p>参考：<a href="https://blog.csdn.net/k571039838k/article/details/82625295">https://blog.csdn.net/k571039838k/article/details/82625295</a><br>搬运：<a href="https://juejin.cn/post/6844904013171785741">https://juejin.cn/post/6844904013171785741</a></p></blockquote><p>友盟集成配置自己看文档，集成的问题应该都不大，毕竟当时没有任何移动端开发经验的我都集成成功了</p><p>要多渠道打包主要是修改几个文件</p><h2 id="android-app-build-gradle"><a href="#android-app-build-gradle" class="headerlink" title="android/app/build.gradle"></a><code>android/app/build.gradle</code></h2><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">android &#123;<br>    defaultConfig &#123;<br>        ...<br>        +++<br>        manifestPlaceholders=[UMENG_CHANNEL_VALUE: <span class="hljs-string">&quot;Umeng&quot;</span>]<br>        flavorDimensions <span class="hljs-string">&quot;versionCode&quot;</span><br>    &#125;<br>    ...<br>    <span class="hljs-comment">// 配置多渠道包支持</span><br>    productFlavors&#123;<br>      Tencent &#123;<span class="hljs-comment">//投放应用宝市场</span><br>              &#125;<br>      Baidu &#123;<span class="hljs-comment">//投放百度市场</span><br>      &#125;<br>      Wandoujia &#123;<span class="hljs-comment">//投放豌豆荚市场</span><br>      &#125;<br>      Vivo &#123;<span class="hljs-comment">//投放vivo市场</span><br>      &#125;<br>      Oppo &#123;<span class="hljs-comment">//投放oppo市场</span><br>      &#125;<br>      Xiaomi &#123;<span class="hljs-comment">//投放小米市场</span><br>      &#125;<br>      Meizu &#123;<span class="hljs-comment">//投放魅族市场</span><br>      &#125;<br>      Huawei &#123;<span class="hljs-comment">//投放华为应用市场</span><br>      &#125;<br>      Lenovo &#123;<span class="hljs-comment">//投放联想市场</span><br>      &#125;<br>      Letv &#123;<span class="hljs-comment">//投放乐视市场</span><br>      &#125;<br>      Gionee &#123;<span class="hljs-comment">//投放金立市场</span><br>      &#125;<br>      HiMarket &#123;<span class="hljs-comment">//投放安卓市场</span><br>      &#125;<br>    &#125;<br>    productFlavors.all &#123; flavor -&gt;<br>        flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]<br>    &#125;<br> <br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="android-app-src-main-AndroidManifest-xml"><a href="#android-app-src-main-AndroidManifest-xml" class="headerlink" title="android/app/src/main/AndroidManifest.xml"></a><code>android/app/src/main/AndroidManifest.xml</code></h2><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">application</span>&gt;</span><br>    ...<br>    +++<br>    <span class="hljs-comment">&lt;!--友盟--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;友盟的appkey&quot;</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;UMENG_APPKEY&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta-data</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;UMENG_CHANNEL&quot;</span> <span class="hljs-attr">android:value</span>=<span class="hljs-string">&quot;$&#123;UMENG_CHANNEL_VALUE&#125;&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>其他地方我就当你已经自己完美集成了友盟，因为其他地方跟普通集成友盟没有任何不同，不同的只有上面的地方。</p><h2 id="添加友盟多渠道后使用react-native-run-android-报错"><a href="#添加友盟多渠道后使用react-native-run-android-报错" class="headerlink" title="添加友盟多渠道后使用react-native run-android 报错"></a>添加友盟多渠道后使用<code>react-native run-android</code> 报错</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">react-native run-android --variant channelNameDebug<br><br>//channelName是渠道的名字，例如Oppo的是<br>react-native run-android --variant OppoDebug <br><br>//百度的是<br>react-native run-android --variant BaiduDebug <br></code></pre></div></td></tr></table></figure><p>我一般直接写在 <code>package.json</code> 文件</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-attr">&quot;android&quot;</span>: <span class="hljs-string">&quot;react-native run-android --variant OppoDebug&quot;</span>,<br>    <span class="hljs-attr">&quot;ios&quot;</span>: <span class="hljs-string">&quot;react-native run-ios&quot;</span>,<br>    <span class="hljs-attr">&quot;start&quot;</span>: <span class="hljs-string">&quot;react-native start&quot;</span>,<br>    <span class="hljs-attr">&quot;test&quot;</span>: <span class="hljs-string">&quot;jest&quot;</span>,<br>    <span class="hljs-attr">&quot;lint&quot;</span>: <span class="hljs-string">&quot;eslint . --ext .js,.jsx,.ts,.tsx&quot;</span>,<br>    <span class="hljs-attr">&quot;bundle-ios&quot;</span>: <span class="hljs-string">&quot;react-native bundle --platform ios --entry-file index.js --bundle-output ./bundles/main.jsbundle --assets-dest  ./bundles --dev false&quot;</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后跟以前一样<code>yarn android</code></p><p>现在正常运行安卓打包命令，已经可以进行多渠道打包了</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-15_18-11-14.png"></p><p>输出的文件名是我自定义的，跟多渠道打包无关哈～</p><p>测试两个渠道，正常！</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-15_18-12-32.png"></p><h1 id="360多渠道加固打包"><a href="#360多渠道加固打包" class="headerlink" title="360多渠道加固打包"></a>360多渠道加固打包</h1><p>之前只想到多渠道打包，没想到加固，等下想回来的时候，我不可能把打包好的十几个apk一个一个再拿去加固吧？</p><p>不用代码，直接用360加固客户端，点几下搞定，速度还行。</p><p>先看图。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_17-45-58.png"></p><p>已经把渠道都打包好，而且还加固了，还签名了！</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><p>先设置好你的渠道，我举个例子。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_17-52-20.png"></p><p>点击导入后，他会自动跳转到多渠道模板的，一个txt双击导入。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_17-55-04.png"></p><p>要修改也可以直接在模版上修改，更加的效率。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_17-53-37.png"></p><p>图中两个地方一定要勾选，不然就是白搞。</p><p>接下来就直接上传打包好的apk，等待就行，他会自动给你分渠道和加固。那么360加固究竟干了啥子东西？</p><h2 id="他做了啥"><a href="#他做了啥" class="headerlink" title="他做了啥"></a>他做了啥</h2><p>首先我们清楚看到有个<code>UMENG_CHANNEL</code> 在，这个明显就是友盟统计啊大哥，360加固会自动在<code>AndroidManifest.xml</code>上加上这么一段代码</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><br>&lt;meta-data<br>        android:name=&quot;UMENG_CHANNEL&quot;<br>        android:value=&quot;qihu360&quot;/&gt;<br></code></pre></div></td></tr></table></figure><p>很熟悉，这就是友盟统计的渠道。</p><p>此处注意，360是会在最后加上这么一段代码，不会覆盖的，所以之前有自己写<code>UMENG_CHANNEL</code>的，记得去掉。</p><p>我们用as打开一个apk看下究竟是不是这样。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_18-01-20.png"></p><p>事实上是的。</p><p>接下来我测试一下。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_18-32-02.png"></p><p>装一个应用宝的看下。</p><p>我等了一个小时没看到统计结果，需要改一下。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取渠道名</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ctx 此处习惯性的设置为activity，实际上context就可以</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果没有获取成功，那么返回值为空</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title">getUMChannelName</span><span class="hljs-params">(Context ctx)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (ctx == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br>        String channelName = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            PackageManager packageManager = ctx.getPackageManager();<br>            <span class="hljs-keyword">if</span> (packageManager != <span class="hljs-keyword">null</span>) &#123;<br>                <span class="hljs-comment">//注意此处为ApplicationInfo 而不是 ActivityInfo,因为友盟设置的meta-data是在application标签中，而不是某activity标签中，所以用ApplicationInfo</span><br>                ApplicationInfo applicationInfo = packageManager.getApplicationInfo(ctx.getPackageName(), PackageManager.GET_META_DATA);<br>                <span class="hljs-keyword">if</span> (applicationInfo != <span class="hljs-keyword">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (applicationInfo.metaData != <span class="hljs-keyword">null</span>) &#123;<br>                        channelName = applicationInfo.metaData.getString(<span class="hljs-string">&quot;UMENG_CHANNEL&quot;</span>);<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> channelName;<br>    &#125;<br><br></code></pre></div></td></tr></table></figure><p>然后初始化的时候也要改。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">RNUMConfigure.init(<span class="hljs-keyword">this</span>, <span class="hljs-string">&quot;这是填你自己的app key&quot;</span>, AppUtils.getUMChannelName(<span class="hljs-keyword">this</span>), UMConfigure.DEVICE_TYPE_PHONE, <span class="hljs-keyword">null</span>);<br></code></pre></div></td></tr></table></figure><p>然后再来一波。</p><p>还是没看到，我直接写死也没看到有数据。gg</p><p>经过一番谷歌，我发现是他只会统计一台设备第一次安装时候的渠道，所以后面无论我怎么装都是没用的，</p><p>我只好找了一台新设备，我后面装了360的，终于看到结果了。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-03-18_22-00-23.png"></p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React Native</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>iOS企业签名无开发者账号使用XCode打包ipa</title>
    <link href="/2021/01/10/iOS%E4%BC%81%E4%B8%9A%E7%AD%BE%E5%90%8D%E6%97%A0%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E4%BD%BF%E7%94%A8XCode%E6%89%93%E5%8C%85ipa/"/>
    <url>/2021/01/10/iOS%E4%BC%81%E4%B8%9A%E7%AD%BE%E5%90%8D%E6%97%A0%E5%BC%80%E5%8F%91%E8%80%85%E8%B4%A6%E5%8F%B7%E4%BD%BF%E7%94%A8XCode%E6%89%93%E5%8C%85ipa/</url>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>一个外包项目，对过来，对方说不上架，没有开发者账号，使用购买企业签名的方式来进行分发，咋搞呢？</p><p>一般来说没有开发者账号确实没法打包，曲线救国，我们可以通过Payload方式进行打包。</p><h1 id="通过Payload方式"><a href="#通过Payload方式" class="headerlink" title="通过Payload方式"></a>通过Payload方式</h1><h2 id="1-和Xcode自带打包方式一样，设置好相关证书和编辑Edit-Scheme。"><a href="#1-和Xcode自带打包方式一样，设置好相关证书和编辑Edit-Scheme。" class="headerlink" title="1. 和Xcode自带打包方式一样，设置好相关证书和编辑Edit Scheme。"></a>1. 和Xcode自带打包方式一样，设置好相关证书和编辑Edit Scheme。</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-08-03.png"></p><h2 id="2-在edit-scheme中设置run的模式为-release"><a href="#2-在edit-scheme中设置run的模式为-release" class="headerlink" title="2. 在edit scheme中设置run的模式为 release"></a>2. 在edit scheme中设置run的模式为 <code>release</code></h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-12-35.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-12-54.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-14-52.png"></p><h2 id="3-command-B-编译一下工程，等待编译完成"><a href="#3-command-B-编译一下工程，等待编译完成" class="headerlink" title="3. command+B 编译一下工程，等待编译完成"></a>3. <code>command+B</code> 编译一下工程，等待编译完成</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-16-41.png"></p><h2 id="4-展开工程Product目录，右键show-in-finder，可以看到-app扩展名文件"><a href="#4-展开工程Product目录，右键show-in-finder，可以看到-app扩展名文件" class="headerlink" title="4. 展开工程Product目录，右键show in finder，可以看到.app扩展名文件"></a>4. 展开工程<code>Product</code>目录，右键<code>show in finder</code>，可以看到.app扩展名文件</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-18-06.png"></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2021-01-10_19-19-50.png"></p><h2 id="5-在桌面创建文件夹Payload，名称一定不要打错，然后将刚刚那个-app文件拷贝到该文件中，鼠标右键，选择压缩文件夹，压缩成功后，将-zip扩展名改为-ipa。到此，ipa包已经成功生成。"><a href="#5-在桌面创建文件夹Payload，名称一定不要打错，然后将刚刚那个-app文件拷贝到该文件中，鼠标右键，选择压缩文件夹，压缩成功后，将-zip扩展名改为-ipa。到此，ipa包已经成功生成。" class="headerlink" title="5. 在桌面创建文件夹Payload，名称一定不要打错，然后将刚刚那个.app文件拷贝到该文件中，鼠标右键，选择压缩文件夹，压缩成功后，将.zip扩展名改为.ipa。到此，ipa包已经成功生成。"></a>5. 在桌面创建文件夹<code>Payload</code>，名称一定不要打错，然后将刚刚那个.app文件拷贝到该文件中，鼠标右键，选择压缩文件夹，压缩成功后，将.zip扩展名改为.ipa。到此，ipa包已经成功生成。</h2><p><img src="https://picture-transmission.iplus-studio.top/image.png"></p><h2 id="6-和Xcode自带打包方式生成ipa包一样，将ipa上产到不同平台进行分发。"><a href="#6-和Xcode自带打包方式生成ipa包一样，将ipa上产到不同平台进行分发。" class="headerlink" title="6. 和Xcode自带打包方式生成ipa包一样，将ipa上产到不同平台进行分发。"></a>6. 和Xcode自带打包方式生成ipa包一样，将ipa上产到不同平台进行分发。</h2><p><img src="https://picture-transmission.iplus-studio.top/image2.png"></p>]]></content>
    
    
    <categories>
      
      <category>移动端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>iOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>送给react开发者的八条优化建议</title>
    <link href="/2021/01/04/%E9%80%81%E7%BB%99react%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%85%AB%E6%9D%A1%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/"/>
    <url>/2021/01/04/%E9%80%81%E7%BB%99react%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%85%AB%E6%9D%A1%E4%BC%98%E5%8C%96%E5%BB%BA%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者： 👽<br><a href="https://mp.weixin.qq.com/s/uTpXoooZL8gF2trX_Yj1Iw">https://mp.weixin.qq.com/s/uTpXoooZL8gF2trX_Yj1Iw</a></p></blockquote><h1 id="一-不能输在起跑线上，优化babel配置-webpack配置为项"><a href="#一-不能输在起跑线上，优化babel配置-webpack配置为项" class="headerlink" title="一 不能输在起跑线上，优化babel配置,webpack配置为项"></a>一 不能输在起跑线上，优化babel配置,webpack配置为项</h1><p>略</p><h1 id="二-路由懒加载，路由监听器"><a href="#二-路由懒加载，路由监听器" class="headerlink" title="二 路由懒加载，路由监听器"></a>二 路由懒加载，路由监听器</h1><p>略</p><h1 id="三-受控性组件颗粒化-，独立请求服务渲染单元"><a href="#三-受控性组件颗粒化-，独立请求服务渲染单元" class="headerlink" title="三 受控性组件颗粒化 ，独立请求服务渲染单元"></a>三 受控性组件颗粒化 ，独立请求服务渲染单元</h1><blockquote><p>这点非常重要，现在反省过来，我自己都还有很多地方可以优化。</p></blockquote><p>可控性组件颗粒化，独立请求服务渲染单元是笔者在实际工作总结出来的经验。目的就是避免因自身的渲染更新或是副作用带来的全局重新渲染。</p><h2 id="1-颗粒化控制可控性组件"><a href="#1-颗粒化控制可控性组件" class="headerlink" title="1 颗粒化控制可控性组件"></a>1 颗粒化控制可控性组件</h2><p>可控性组件和非可控性的区别就是<code>dom</code>元素值是否与受到<code>react</code>数据状态<code>state</code>控制。一旦由<code>react</code>的<code>state</code>控制数据状态，比如<code>input</code>输入框的值，就会造成这样一个场景，为了使<code>input</code>值实时变化，会不断<code>setState</code>，就会不断触发<code>render</code>函数，如果父组件内容简单还好，如果父组件比较复杂，会造成牵一发动全身，如果其他的子组件中<code>componentWillReceiveProps</code>这种带有副作用的钩子，那么引发的蝴蝶效应不敢想象。比如如下<code>demo</code>。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span>,<span class="hljs-title">any</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>        <span class="hljs-built_in">this</span>.state=&#123;<br>            inputValue:<span class="hljs-string">&#x27;&#x27;</span><br>        &#125;<br>    &#125;<br>    handerChange=<span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span> <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">inputValue</span>:e.target.value  &#125;)<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; inputValue &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &#123; <span class="hljs-comment">/*  我们增加三个子组件 */</span> &#125;<br>            &lt;ComA /&gt;<br>            &lt;ComB /&gt;<br>            &lt;ComC /&gt;<br>            &lt;div className=<span class="hljs-string">&quot;box&quot;</span> &gt;<br>                &lt;Input  value=&#123;inputValue&#125;  onChange=&#123; <span class="hljs-function">(<span class="hljs-params">e</span>)=&gt;</span> <span class="hljs-built_in">this</span>.handerChange(e) &#125; /&gt;<br>            &lt;/div&gt;<br>            &#123;<span class="hljs-comment">/* 我们首先来一个列表循环 */</span>&#125;<br>            &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;列表循环了&#x27;</span> )<br>                    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> &gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>                &#125;)<br>            &#125;<br>            &#123;<br>              <span class="hljs-comment">/* 这里可能是更复杂的结构 */</span><br>              <span class="hljs-comment">/* ------------------ */</span><br>            &#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>组件A</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;组件A渲染&#x27;</span>)<br>   <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>我是组件A<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>组件B，有一个componentWillReceiveProps钩子</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentWillReceiveProps</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;componentWillReceiveProps执行&#x27;</span>)<br>        <span class="hljs-comment">/* 可能做一些骚操作 wu lian */</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;组件B渲染&#x27;</span>)<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            我是组件B<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>组件C有一个列表循环</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(props)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;组件c渲染&#x27;</span>)<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>              我是组件c<br>             &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;组件C列表循环了&#x27;</span> )<br>                    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> &gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>                &#125;)<br>            &#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果</p><p><img src="https://picture-transmission.iplus-studio.top/640.gif"></p><p>当我们在<code>input</code>输入内容的时候。就会造成如上的现象，所有的不该重新更新的地方，全部重新执行了一遍，这无疑是巨大的性能损耗。这个一个<code>setState</code>触发带来的一股巨大的由此组件到子组件可能更深的更新流，带来的副作用是不可估量的。所以我们可以思考一下，是否将这种受控性组件颗粒化，让自己更新 -&gt; 渲染过程由自身调度。</p><p>说干就干，我们对上面的<code>input</code>表单单独<strong>颗粒化</strong>处理。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> ComponentInput = memo(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">&#123; notifyFatherChange &#125;:any</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ inputValue , setInputValue ] = useState(<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">const</span> handerChange = useMemo(<span class="hljs-function">() =&gt;</span> <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>        setInputValue(e.target.value)<br>        notifyFatherChange &amp;&amp; notifyFatherChange(e.target.value)<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Input</span>   <span class="hljs-attr">value</span>=<span class="hljs-string">&#123;inputValue&#125;</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">handerChange</span>  &#125;  /&gt;</span></span><br>&#125;)<br></code></pre></div></td></tr></table></figure><p>此时的组件更新由组件单元自行控制，不需要父组件的更新，所以不需要父组件设置独立<code>state</code>保留状态。只需要绑定到<code>this</code>上即可。不是所有状态都应该放在组件的 <code>state</code> 中. 例如缓存数据。如果需要组件响应它的变动, 或者需要渲染到视图中的数据才应该放到 <code>state</code> 中。这样可以避免不必要的数据变动导致组件重新渲染.</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span>,<span class="hljs-title">any</span>&gt;</span>&#123;   <br>    formData :any = &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &#123; <span class="hljs-comment">/*  我们增加三个子组件 */</span> &#125;<br>            &lt;ComA /&gt;<br>            &lt;ComB /&gt;<br>            &lt;ComC /&gt;<br>            &lt;div className=<span class="hljs-string">&quot;box&quot;</span> &gt;<br>               &lt;ComponentInput notifyFatherChange=&#123; <span class="hljs-function">(<span class="hljs-params">value</span>)=&gt;</span>&#123; <span class="hljs-built_in">this</span>.formData.inputValue = value &#125; &#125;  /&gt;<br>               &lt;Button onClick=&#123;<span class="hljs-function">()=&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.formData)&#125; &gt;打印数据&lt;/Button&gt;<br>            &lt;/div&gt;<br>            &#123;<span class="hljs-comment">/* 我们首先来一个列表循环 */</span>&#125;<br>            &#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-built_in">Array</span>(<span class="hljs-number">10</span>).fill(<span class="hljs-number">0</span>).map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;列表循环了&#x27;</span> )<br>                    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> &gt;</span>&#123;item&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>                &#125;)<br>            &#125;<br>            &#123;<br>              <span class="hljs-comment">/* 这里可能是更复杂的结构 */</span><br>              <span class="hljs-comment">/* ------------------ */</span><br>            &#125;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果</p><p><img src="https://picture-transmission.iplus-studio.top/640%20%281%29.gif"></p><p>这样除了当前组件外，其他地方没有收到任何渲染波动，达到了我们想要的目的。</p><h2 id="2-建立独立的请求渲染单元"><a href="#2-建立独立的请求渲染单元" class="headerlink" title="2 建立独立的请求渲染单元"></a>2 建立独立的请求渲染单元</h2><p>建立独立的请求渲染单元，直接理解就是，如果我们把页面，分为请求数据展示部分(通过调用后端接口，获取数据)，和基础部分(不需要请求数据，已经直接写好的)，对于一些逻辑交互不是很复杂的数据展示部分，我推荐用一种独立组件，独立请求数据，独立控制渲染的模式。至于为什么我们可以慢慢分析。</p><p>首先我们看一下传统的页面模式。</p><p><img src="https://picture-transmission.iplus-studio.top/640.webp"></p><p>页面有三个展示区域分别，做了三次请求，触发了三次<code>setState</code>,渲染三次页面，即使用<code>Promise.all</code>等方法，但是也不保证接下来交互中，会有部分展示区重新拉取数据的可能。一旦有一个区域重新拉取数据，另外两个区域也会说、受到牵连，这种效应是不可避免的，即便<code>react</code>有很好的<code>diff</code>算法去调协相同的节点，但是比如长列表等情况，循环在所难免。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    state :any=&#123;<br>        dataA:<span class="hljs-literal">null</span>,<br>        dataB:<span class="hljs-literal">null</span>,<br>        dataC:<span class="hljs-literal">null</span><br>    &#125;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">/* 获取A区域数据 */</span><br>        <span class="hljs-keyword">const</span> dataA = <span class="hljs-keyword">await</span> getDataA()<br>        <span class="hljs-built_in">this</span>.setState(&#123; dataA &#125;)<br>        <span class="hljs-comment">/* 获取B区域数据 */</span><br>        <span class="hljs-keyword">const</span> dataB = <span class="hljs-keyword">await</span> getDataB()<br>        <span class="hljs-built_in">this</span>.setState(&#123; dataB &#125;)<br>        <span class="hljs-comment">/* 获取C区域数据 */</span><br>        <span class="hljs-keyword">const</span> dataC = <span class="hljs-keyword">await</span> getDataC()<br>        <span class="hljs-built_in">this</span>.setState(&#123; dataC &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; dataA , dataB , dataC &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-built_in">console</span>.log(dataA,dataB,dataC)<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &lt;div&gt; &#123; <span class="hljs-comment">/* 用 dataA 数据做展示渲染 */</span> &#125; &lt;/div&gt;<br>            &lt;div&gt; &#123; <span class="hljs-comment">/* 用 dataB 数据做展示渲染 */</span> &#125; &lt;/div&gt;<br>            &lt;div&gt; &#123; <span class="hljs-comment">/* 用 dataC 数据做展示渲染 */</span> &#125; &lt;/div&gt;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接下来我们，把每一部分抽取出来，形成独立的渲染单元，每个组件都独立数据请求到独立渲染。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ComponentA</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ dataA, setDataA ] = useState(<span class="hljs-literal">null</span>)<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>       getDataA().then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span> setDataA(res.data)  )<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123; /* 用 dataA 数据做展示渲染 */ &#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ComponentB</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ dataB, setDataB ] = useState(<span class="hljs-literal">null</span>)<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>       getDataB().then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span> setDataB(res.data)  )<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123; /* 用 dataB 数据做展示渲染 */ &#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ComponentC</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ dataC, setDataC ] = useState(<span class="hljs-literal">null</span>)<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>       getDataC().then(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span> setDataC(res.data)  )<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span>  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span> &#123; /* 用 dataC 数据做展示渲染 */ &#125; <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;  <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>        &lt;ComponentA /&gt;<br>        &lt;ComponentB /&gt;<br>        &lt;ComponentC /&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样一来，彼此的数据更新都不会相互影响。</p><p><img src="https://picture-transmission.iplus-studio.top/640%20%281%29.webp"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>拆分需要单独调用后端接口的细小组件，建立独立的数据请求和渲染，这种依赖数据更新 -&gt; 视图渲染的组件，能从整个体系中抽离出来 ，好处我总结有以下几个方面。</p><ol><li><p>可以避免父组件的冗余渲染 ，<code>react</code>的数据驱动，依赖于 <code>state</code> 和 <code>props</code> 的改变，改变 <code>state</code> 必然会对组件 <code>render</code> 函数调用，如果父组件中的子组件过于复杂，一个自组件的 <code>state</code> 改变，就会牵一发动全身，必然影响性能，所以如果把很多依赖请求的组件抽离出来，可以直接减少渲染次数。</p></li><li><p>可以优化组件自身性能，无论从<code>class</code>声明的有状态组件还是<code>fun</code>声明的无状态，都有一套自身优化机制，无论是用 <code>shouldupdate</code> 还是用 <code>hooks</code> 中 <code>useMemo</code> <code>useCallback</code> ，都可以根据自身情况，定制符合场景的渲条件，使得依赖数据请求组件形成自己一个小的，适合自身的渲染环境。</p></li><li><p>能够和 <code>redux</code> ,以及<code>redux</code>衍生出来 <code>redux-action</code> , <code>dva</code>,更加契合的工作，用 <code>connect</code> 包裹的组件，就能通过制定好的契约，根据所需求的数据更新，而更新自身，而把这种模式用在这种小的，需要数据驱动的组件上，就会起到物尽其用的效果。</p></li></ol><h1 id="四-shouldComponentUpdate-PureComponent-和-React-memo-immetable-js-助力性能调优"><a href="#四-shouldComponentUpdate-PureComponent-和-React-memo-immetable-js-助力性能调优" class="headerlink" title="四 shouldComponentUpdate ,PureComponent 和 React.memo , immetable.js 助力性能调优"></a>四 <code>shouldComponentUpdate</code> ,<code>PureComponent</code> 和 <code>React.memo</code> , <code>immetable.js</code> 助力性能调优</h1><p>在这里我们拿<code>immetable.js</code>为例，讲最传统的限制更新方法，第六部分将要将一些避免重新渲染的细节。</p><h2 id="PureComponent-和-React-memo"><a href="#PureComponent-和-React-memo" class="headerlink" title="PureComponent 和 React.memo"></a><code>PureComponent</code> 和 <code>React.memo</code></h2><p><code>React.PureComponent</code> 与 <code>React.Component</code> 用法差不多 ,但 <code>React.PureComponent</code> 通过<code>props</code>和<code>state</code>的浅对比来实现 <code>shouldComponentUpdate()</code>。如果对象包含复杂的数据结构(比如对象和数组)，他会浅比较，如果深层次的改变，是无法作出判断的，<code>React.PureComponent</code> 认为没有变化，而没有渲染试图。</p><p>如这个例子</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">PureComponent</span>&lt;<span class="hljs-title">any</span>,<span class="hljs-title">any</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.props)<br>        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello,wrold<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span>,<span class="hljs-title">any</span>&gt;</span>&#123;<br>    state=&#123;<br>        data:&#123; <span class="hljs-attr">a</span> : <span class="hljs-number">1</span> , <span class="hljs-attr">b</span> : <span class="hljs-number">2</span> &#125;<br>    &#125;<br>    handerClick=<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-built_in">this</span>.state<br>        data.a++<br>        <span class="hljs-built_in">this</span>.setState(&#123; data &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; data &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &lt;button onClick=&#123; <span class="hljs-built_in">this</span>.handerClick &#125; &gt;点击&lt;/button&gt;<br>            &lt;Text data=&#123;data&#125; /&gt;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果</p><p><img src="https://picture-transmission.iplus-studio.top/640%20%282%29.gif"></p><p>我们点击按钮，发现 <code>&lt;Text /&gt;</code> 根本没有重新更新。这里虽然改了<code>data</code>但是只是改变了<code>data</code>下的属性，所以 <code>PureComponent</code> 进行浅比较不会<code>update</code>。</p><p>想要解决这个问题实际也很容易。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;Text data=&#123;&#123; ...data &#125;&#125; /&gt;<br></code></pre></div></td></tr></table></figure><p>无论组件是否是 <code>PureComponent</code>，如果定义了 <code>shouldComponentUpdate()</code>，那么会调用它并以它的执行结果来判断是否 <code>update</code>。在组件未定义 <code>shouldComponentUpdate()</code> 的情况下，会判断该组件是否是 <code>PureComponent</code>，如果是的话，会对新旧 <code>props</code>、<code>state</code> 进行 <code>shallowEqual</code> 比较，一旦新旧不一致，会触发渲染更新。</p><p><code>react.memo</code> 和 <code>PureComponent</code> 功能类似 ，<code>react.memo</code> 作为第一个高阶组件，第二个参数 可以对 <code>props</code> 进行比较 ，和<code>shouldComponentUpdate</code>不同的, 当第二个参数返回 <code>true</code> 的时候，证明<code>props</code>没有改变，不渲染组件，反之渲染组件。</p><h2 id="shouldComponentUpdate"><a href="#shouldComponentUpdate" class="headerlink" title="shouldComponentUpdate"></a>shouldComponentUpdate</h2><p>使用 <code>shouldComponentUpdate()</code> 以让<code>React</code>知道当<code>state</code>或<code>props</code>的改变是否影响组件的重新<code>render</code>，默认返回<code>ture</code>，返回<code>false</code>时不会重新渲染更新，而且该方法并不会在初始化渲染或当使用 <code>forceUpdate()</code> 时被调用，通常一个<code>shouldComponentUpdate</code> 应用是这么写的。</p><p><strong>控制状态</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>  <span class="hljs-comment">/* 当 state 中 data1 发生改变的时候，重新更新组件 */</span>  <br>  <span class="hljs-keyword">return</span> nextState.data1 !== <span class="hljs-built_in">this</span>.state.data1<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个的意思就是 仅当<code>state</code> 中 <code>data1</code> 发生改变的时候，重新更新组件。</p><p><strong>控制prop属性</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">shouldComponentUpdate</span>(<span class="hljs-params">nextProps, nextState</span>)</span> &#123;<br>  <span class="hljs-comment">/* 当 props 中 data2发生改变的时候，重新更新组件 */</span>  <br>  <span class="hljs-keyword">return</span> nextProps.data2 !== <span class="hljs-built_in">this</span>.props.data2<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个的意思就是 仅当<code>props</code> 中 <code>data2</code> 发生改变的时候，重新更新组件。</p><h2 id="immetable-js"><a href="#immetable-js" class="headerlink" title="immetable.js"></a>immetable.js</h2><p><code>immetable.js</code> 是<code>Facebook</code> 开发的一个js库，可以提高对象的比较性能，像之前所说的<code>pureComponent</code> 只能对对象进行浅比较，,对于对象的数据类型,却束手无策,所以我们可以用 <code>immetable.js</code> 配合 <code>shouldComponentUpdate</code> 或者 <code>react.memo</code>来使用。<code>immutable</code> 中</p><p>我们用<code>react-redux</code>来简单举一个例子，如下所示 数据都已经被 <code>immetable.js</code>处理。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> &#123; is  &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;immutable&#x27;</span><br><span class="hljs-keyword">const</span> GoodItems = connect(<span class="hljs-function"><span class="hljs-params">state</span> =&gt;</span><br>    (&#123; <span class="hljs-attr">GoodItems</span>: filter(state.getIn([<span class="hljs-string">&#x27;Items&#x27;</span>, <span class="hljs-string">&#x27;payload&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>]), state.getIn([<span class="hljs-string">&#x27;customItems&#x27;</span>, <span class="hljs-string">&#x27;payload&#x27;</span>, <span class="hljs-string">&#x27;list&#x27;</span>])) || Immutable.List(), &#125;)<br>    <span class="hljs-comment">/* 此处省略很多代码～～～～～～ */</span><br>)(memo(<span class="hljs-function">(<span class="hljs-params">&#123; Items, dispatch, setSeivceId &#125;</span>) =&gt;</span> &#123;<br>   <span class="hljs-comment">/*  */</span><br>&#125;, <span class="hljs-function">(<span class="hljs-params">pre, next</span>) =&gt;</span> is(pre.Items, next.Items)))<br></code></pre></div></td></tr></table></figure><p>通过 <code>is</code> 方法来判断，前后<code>Items</code>(对象数据类型)是否发生变化。</p><h1 id="五-规范写法，合理处理细节问题"><a href="#五-规范写法，合理处理细节问题" class="headerlink" title="五 规范写法，合理处理细节问题"></a>五 规范写法，合理处理细节问题</h1><p>有的时候，我们在敲代码的时候，稍微注意一下，就能避免性能的开销。也许只是稍加改动，就能其他优化性能的效果。</p><h2 id="①绑定事件尽量不要使用箭头函数"><a href="#①绑定事件尽量不要使用箭头函数" class="headerlink" title="①绑定事件尽量不要使用箭头函数"></a>①绑定事件尽量不要使用箭头函数</h2><p>面临问题</p><p>众所周知，<code>react</code>更新来大部分情况来自于<code>props</code>的改变(被动渲染)，和<code>state</code>改变(主动渲染)。当我们给未加任何更新限定条件子组件绑定事件的时候，或者是<code>PureComponent</code> 纯组件， 如果我们箭头函数使用的话。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;ChildComponent handerClick=&#123;<span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-number">666</span>) &#125;&#125;  /&gt;<br></code></pre></div></td></tr></table></figure><p>每次渲染时都会创建一个新的事件处理器，这会导致 <code>ChildComponent</code> 每次都会被渲染。</p><p>即便我们用箭头函数绑定给<code>dom</code>元素。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;div onClick=&#123; <span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-number">777</span>) &#125; &#125; &gt;hello,world&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><p>每次<code>react</code>合成事件事件的时候，也都会重新声明一个新事件。</p><p><strong>解决问题</strong></p><p>解决这个问题事件很简单，分为无状态组件和有状态组件。</p><p><strong>有状态组件</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    handerClick=<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">666</span>)<br>    &#125;<br>    <span class="hljs-comment">// 这里照样可以传参数</span><br>    handerClick1=<span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">777</span>, event)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &lt;ChildComponent handerClick=&#123; <span class="hljs-built_in">this</span>.handerClick &#125;  /&gt;<br>            &lt;div onClick=&#123; <span class="hljs-built_in">this</span>.handerClick1 &#125;  &gt;hello,world&lt;/div&gt;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>无状态组件</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>   <br>    <span class="hljs-keyword">const</span> handerClick1 = useMemo(<span class="hljs-function">()=&gt;</span><span class="hljs-function">()=&gt;</span>&#123;<br>       <span class="hljs-built_in">console</span>.log(<span class="hljs-number">777</span>)<br>    &#125;,[])  <span class="hljs-comment">/* [] 存在当前 handerClick1 的依赖项*/</span><br>    <span class="hljs-keyword">const</span> handerClick = useCallback(<span class="hljs-function">()=&gt;</span>&#123; <span class="hljs-built_in">console</span>.log(<span class="hljs-number">666</span>) &#125;,[])  <span class="hljs-comment">/* [] 存在当前 handerClick 的依赖项*/</span><br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>        &lt;ChildComponent handerClick=&#123; handerClick &#125;  /&gt;<br>        &lt;div onClick=&#123; handerClick1 &#125;  &gt;hello,world&lt;/div&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于<code>dom</code>，如果我们需要传递参数。我们可以这么写。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> handerClick1 = useMemo(<span class="hljs-function">()=&gt;</span><span class="hljs-function">(<span class="hljs-params">event</span>)=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> mes = event.currentTarget.dataset.mes<br>        <span class="hljs-built_in">console</span>.log(mes) <span class="hljs-comment">/* hello,world */</span><br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>        &lt;div  data-mes=&#123; <span class="hljs-string">&#x27;hello,world&#x27;</span> &#125; onClick=&#123; handerClick1 &#125;  &gt;hello,world&lt;/div&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="②循环正确使用key"><a href="#②循环正确使用key" class="headerlink" title="②循环正确使用key"></a>②循环正确使用key</h2><p>无论是<code>react</code> 和 <code>vue</code>,正确使用<code>key</code>,目的就是在一次循环中，找到与新节点对应的老节点，复用节点，节省开销。想深入理解的同学可以看一下笔者的另外一篇文章 <a href="https://mp.weixin.qq.com/s/8Hxl7DQjqRZ7TGlQheGG5Q">全面解析vue3.0 diff算法</a> 里面有对<code>key</code>详细说明。我们今天来看以下<code>key</code>正确用法,和错误用法。</p><ol><li>错误用法</li></ol><p><strong>错误用法一：用index做key</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> list = [ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;哈哈&#x27;</span> &#125; , &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;嘿嘿&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;嘻嘻&#x27;</span> &#125; ]<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>       &lt;ul&gt;<br>         &#123;  list.map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index&#125;</span> &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>)  &#125;<br>       &lt;/ul&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这种加<code>key</code>的性能,实际和不加<code>key</code>效果差不多，每次还是从头到尾<code>diff</code>。</p><p><strong>错误用法二:用index拼接其他的字段</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> list = [ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;哈哈&#x27;</span> &#125; , &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;嘿嘿&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;嘻嘻&#x27;</span> &#125; ]<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>       &lt;ul&gt;<br>         &#123;  list.map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;index</span> + <span class="hljs-attr">item.name</span> &#125; &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>)  &#125;<br>       &lt;/ul&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果有元素移动或者删除，那么就失去了一一对应关系，剩下的节点都不能有效复用。</p><ol start="2"><li>正确用法</li></ol><p><strong>正确用法：用唯一id作为key</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> list = [ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;哈哈&#x27;</span> &#125; , &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span>, <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;嘿嘿&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;嘻嘻&#x27;</span> &#125; ]<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>       &lt;ul&gt;<br>         &#123;  list.map(<span class="hljs-function">(<span class="hljs-params">item,index</span>)=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span> &#125; &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span>)  &#125;<br>       &lt;/ul&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>用唯一的健<code>id</code>作为<code>key</code>,能够做到有效复用元素节点。</p><h2 id="③无状态组件hooks-useMemo-避免重复声明。"><a href="#③无状态组件hooks-useMemo-避免重复声明。" class="headerlink" title="③无状态组件hooks-useMemo 避免重复声明。"></a>③无状态组件<code>hooks-useMemo</code> 避免重复声明。</h2><p>对于无状态组件，数据更新就等于函数上下文的重复执行。那么函数里面的变量，方法就会重新声明。比如如下情况。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ number , setNumber  ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> handerClick1 = <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-comment">/* 一些操作 */</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> handerClick2 = <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-comment">/* 一些操作 */</span><br>    &#125;<br>    <span class="hljs-keyword">const</span> handerClick3 = <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-comment">/* 一些操作 */</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>        &lt;a onClick=&#123; handerClick1 &#125; &gt;点我有惊喜<span class="hljs-number">1</span>&lt;/a&gt;<br>        &lt;a onClick=&#123; handerClick2 &#125; &gt;点我有惊喜<span class="hljs-number">2</span>&lt;/a&gt;<br>        &lt;a onClick=&#123; handerClick3 &#125; &gt;点我有惊喜<span class="hljs-number">3</span>&lt;/a&gt;<br>        &lt;button onClick=&#123; <span class="hljs-function">()=&gt;</span> setNumber(number+<span class="hljs-number">1</span>) &#125; &gt; 点击 &#123; number &#125; &lt;/button&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>每次点击<code>button</code>的时候,都会执行<code>Index</code>函数。<code>handerClick1</code> , <code>handerClick2</code>, <code>handerClick3</code>都会重新声明。为了避免这个情况的发生，我们可以用 <code>useMemo</code> 做缓存，我们可以改成如下。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ number , setNumber  ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> [ handerClick1 , handerClick2  ,handerClick3] = useMemo(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> fn1 = <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-comment">/* 一些操作 */</span><br>        &#125;<br>        <span class="hljs-keyword">const</span> fn2 = <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-comment">/* 一些操作 */</span><br>        &#125;<br>        <span class="hljs-keyword">const</span>  fn3= <span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-comment">/* 一些操作 */</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> [fn1 , fn2 ,fn3]<br>    &#125;,[]) <span class="hljs-comment">/* 只有当数据里面的依赖项，发生改变的时候，才会重新声明函数。*/</span><br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>        &lt;a onClick=&#123; handerClick1 &#125; &gt;点我有惊喜<span class="hljs-number">1</span>&lt;/a&gt;<br>        &lt;a onClick=&#123; handerClick2 &#125; &gt;点我有惊喜<span class="hljs-number">2</span>&lt;/a&gt;<br>        &lt;a onClick=&#123; handerClick3 &#125; &gt;点我有惊喜<span class="hljs-number">3</span>&lt;/a&gt;<br>        &lt;button onClick=&#123; <span class="hljs-function">()=&gt;</span> setNumber(number+<span class="hljs-number">1</span>) &#125; &gt; 点击 &#123; number &#125; &lt;/button&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如下改变之后，<code>handerClick1</code> , <code>handerClick2</code>, <code>handerClick3</code> 会被缓存下来。</p><h2 id="④懒加载-Suspense-和-lazy"><a href="#④懒加载-Suspense-和-lazy" class="headerlink" title="④懒加载 Suspense 和 lazy"></a>④懒加载 Suspense 和 lazy</h2><p><code>Suspense</code> 和 <code>lazy</code> 可以实现 <code>dynamic import</code> 懒加载效果，原理和上述的路由懒加载差不多。在 <code>React</code> 中的使用方法是在 <code>Suspense</code> 组件中使用 <code>&lt;LazyComponent&gt;</code> 组件。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> LazyComponent = React.lazy(<span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./LazyComponent&#x27;</span>));<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> (<br>    &lt;div&gt;<br>      &lt;Suspense fallback=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&#125;&gt;<br>        &lt;LazyComponent /&gt;<br>      &lt;/Suspense&gt;<br>    &lt;/div&gt;<br>  )<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>LazyComponent</code> 是通过懒加载加载进来的，所以渲染页面的时候可能会有延迟，但使用了 <code>Suspense</code> 之后，在加载状态下，可以用<code>&lt;div&gt;Loading...&lt;/div&gt;</code>作为<code>loading</code>效果。</p><p><code>Suspense</code> 可以包裹多个懒加载组件。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;Suspense fallback=&#123;<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>Loading...<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>&#125;&gt;<br>    &lt;LazyComponent /&gt;<br>    &lt;LazyComponent1 /&gt;<br>&lt;/Suspense&gt;<br></code></pre></div></td></tr></table></figure><h1 id="六-多种方式避免重复渲染"><a href="#六-多种方式避免重复渲染" class="headerlink" title="六 多种方式避免重复渲染"></a>六 多种方式避免重复渲染</h1><p>避免重复渲染,是<code>react</code>性能优化的重要方向。如果想尽心尽力处理好<code>react</code>项目每一个细节，那么就要从每一行代码开始，从每一组件开始。正所谓不积硅步无以至千里。</p><h2 id="①-学会使用的批量更新"><a href="#①-学会使用的批量更新" class="headerlink" title="① 学会使用的批量更新"></a>① 学会使用的批量更新</h2><p><strong>批量更新</strong></p><p>这次讲的批量更新的概念，实际主要是针对无状态组件和<code>hooks</code>中<code>useState</code>,和 <code>class</code>有状态组件中的<code>this.setState</code>，两种方法已经做了批量更新的处理。比如如下例子</p><p><strong>一次更新中</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">prop</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(prop)<br>        <span class="hljs-built_in">this</span>.state = &#123;<br>            a:<span class="hljs-number">1</span>,<br>            b:<span class="hljs-number">2</span>,<br>            c:<span class="hljs-number">3</span>,<br>        &#125;<br>    &#125;<br>    handerClick=<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; a,b,c &#125; :any = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">a</span>:a+<span class="hljs-number">1</span> &#125;)<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">b</span>:b+<span class="hljs-number">1</span> &#125;)<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">c</span>:c+<span class="hljs-number">1</span> &#125;)<br>    &#125;<br>    render= <span class="hljs-function">() =&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handerClick&#125;</span> /&gt;</span></span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>点击事件发生之后，会触发三次 <code>setState</code>,但是不会渲染三次，因为有一个批量更新<code>batchUpdate</code>批量更新的概念。三次<code>setState</code>最后被合成类似如下样子</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.setState(&#123;<br>    a:a+<span class="hljs-number">1</span> ,<br>    b:b+<span class="hljs-number">1</span> ,<br>    c:c+<span class="hljs-number">1</span> <br>&#125;)<br></code></pre></div></td></tr></table></figure><p><strong>无状态组件中</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span>  [ a , setA ] = useState(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span>  [ b , setB ] = useState(&#123;&#125;)<br><span class="hljs-keyword">const</span>  [ c , setC ] = useState(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> handerClick = <span class="hljs-function">() =&gt;</span> &#123;<br>       setB( &#123; ...b &#125; ) <br>       setC( c+<span class="hljs-number">1</span> ) <br>       setA( a+<span class="hljs-number">1</span> )<br>   &#125;<br></code></pre></div></td></tr></table></figure><p><strong>批量更新失效</strong></p><p>当我们针对上述两种情况加以如下处理之后。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">handerClick=<span class="hljs-function">()=&gt;</span>&#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">a</span>:a+<span class="hljs-number">1</span> &#125;)<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">b</span>:b+<span class="hljs-number">1</span> &#125;)<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">c</span>:c+<span class="hljs-number">1</span> &#125;)<br>    &#125;, <span class="hljs-number">0</span>)<br>&#125;<br> <span class="hljs-keyword">const</span> handerClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">()=&gt;</span>&#123;<br>    setB( &#123; ...b &#125; ) <br>    setC( c+<span class="hljs-number">1</span> ) <br>    setA( a+<span class="hljs-number">1</span> )<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们会发现，上述两种情况 ，组件都更新渲染了三次 ，此时的批量更新失效了。这种情况在<code>react-hooks</code>中也普遍存在，这种情况甚至在<code>hooks</code>中更加明显，因为我们都知道<code>hooks</code>中每个<code>useState</code>保存了一个状态，并不是让<code>class</code>声明组件中，可以通过<code>this.state</code>统一协调状态，再一次异步函数中，比如说一次<code>ajax</code>请求后，想通过多个<code>useState</code>改变状态，会造成多次渲染页面，为了解决这个问题，我们可以手动批量更新。</p><p><strong>手动批量更新</strong></p><p><code>react-dom</code> 中提供了<code>unstable_batchedUpdates</code>方法进行手动批量更新。这个<code>api</code>更契合<code>react-hooks</code>，我们可以这样做。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"> <span class="hljs-keyword">const</span> handerClick = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">()=&gt;</span>&#123;<br>        unstable_batchedUpdates(<span class="hljs-function">()=&gt;</span>&#123;<br>            setB( &#123; ...b &#125; ) <br>            setC( c+<span class="hljs-number">1</span> ) <br>            setA( a+<span class="hljs-number">1</span> )<br>        &#125;)<br>    &#125;)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样三次更新，就会合并成一次。同样达到了批量更新的效果。</p><h2 id="②-合并state"><a href="#②-合并state" class="headerlink" title="② 合并state"></a>② 合并state</h2><p>class类组件(有状态组件)</p><p>合并<code>state</code>这种，是一种我们在<code>react</code>项目开发中要养成的习惯。我看过有些同学的代码中可能会这么写(如下<code>demo</code>是模拟的情况，实际要比这复杂的多)。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span> , <span class="hljs-title">any</span>&gt;</span>&#123;<br>    state = &#123;<br>          loading:<span class="hljs-literal">false</span> <span class="hljs-comment">/* 用来模拟loading效果 */</span>,<br>          list:[],<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">/* 模拟一个异步请求数据场景 */</span><br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">loading</span> : <span class="hljs-literal">true</span> &#125;) <span class="hljs-comment">/* 开启loading效果 */</span><br>        <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-keyword">const</span> list = [ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xixi&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span> &#125;,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;heihei&#x27;</span> &#125; ]<br>            <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">loading</span> : <span class="hljs-literal">false</span> &#125;,<span class="hljs-function">()=&gt;</span>&#123;<br>                <span class="hljs-built_in">this</span>.setState(&#123;<br>                    list:list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>(&#123;<br>                        ...item,<br>                        name:item.name.toLocaleUpperCase()<br>                    &#125;))<br>                &#125;)<br>            &#125;)<br>        &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> &#123; list &#125; = <span class="hljs-built_in">this</span>.state<br>    <span class="hljs-keyword">return</span> &lt;div&gt;&#123;<br>            list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;item.id&#125;</span>  &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>        &#125;&lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>分别用两次<code>this.state</code>第一次解除<code>loading</code>状态，第二次格式化数据列表。这另两次更新完全没有必要，可以用一次<code>setState</code>更新完美解决。不这样做的原因是，对于像<code>demo</code>这样的简单结构还好，对于复杂的结构，一次更新可能都是宝贵的，所以我们应该学会去合并<code>state</code>。将上述<code>demo</code>这样修改。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-built_in">this</span>.setState(&#123;<br>    loading : <span class="hljs-literal">false</span>,<br>    list:list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>(&#123;<br>        ...item,<br>        name:item.name.toLocaleUpperCase()<br>    &#125;))<br>&#125;)<br></code></pre></div></td></tr></table></figure><p><strong>函数组件(无状态组件)</strong></p><p>对于无状态组件，我们可以通过一个<code>useState</code>保存多个状态，没有必要每一个状态都用一个<code>useState</code>。</p><p>对于这样的情况。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [ a ,setA ] = useState(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">const</span> [ b ,setB ] = useState(<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><p>我们完全可以一个<code>state</code>搞定。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> [ numberState , setNumberState ] = useState(&#123; <span class="hljs-attr">a</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">b</span> :<span class="hljs-number">2</span>&#125;)<br></code></pre></div></td></tr></table></figure><p>但是要注意，如果我们的<code>state</code>已经成为 <code>useEffect</code> , <code>useCallback</code> , <code>useMemo</code>依赖项，请慎用如上方法。</p><h2 id="③-useMemo-React-memo隔离单元"><a href="#③-useMemo-React-memo隔离单元" class="headerlink" title="③ useMemo React.memo隔离单元"></a>③ useMemo React.memo隔离单元</h2><p><code>react</code>正常的更新流，就像利剑一下，从父组件项子组件穿透，为了避免这些重复的更新渲染，<code>shouldComponentUpdate</code> , <code>React.memo</code>等api也应运而生。但是有的情况下，多余的更新在所难免，比如如下这种情况。这种更新会由父组件 -&gt; 子组件 传递下去。</p><p><img src="https://picture-transmission.iplus-studio.top/640%20%282%29.webp"></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildrenComponent</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">2222</span>)<br>    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>hello,world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ list  ] = useState([ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xixi&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span> &#125;,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;heihei&#x27;</span> &#125; ])<br>    <span class="hljs-keyword">const</span> [ number , setNumber ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>       &lt;span&gt;&#123; number &#125;&lt;/span&gt;<br>       &lt;button onClick=&#123; <span class="hljs-function">()=&gt;</span> setNumber(number + <span class="hljs-number">1</span>) &#125; &gt;点击&lt;/button&gt;<br>           &lt;ul&gt;<br>               &#123;<br>                list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1111</span>)<br>                    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span> &#125;  &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>                &#125;)<br>               &#125;<br>           &lt;/ul&gt;<br>           &lt;ChildrenComponent /&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>效果</p><p><img src="https://picture-transmission.iplus-studio.top/640%20%283%29.gif"></p><p>针对这一现象，我们可以通过使用<code>useMemo</code>进行隔离，形成独立的渲染单元，每次更新上一个状态会被缓存，循环不会再执行，子组件也不会再次被渲染,我们可以这么做。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Index</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ list  ] = useState([ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xixi&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span> &#125;,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;heihei&#x27;</span> &#125; ])<br>    <span class="hljs-keyword">const</span> [ number , setNumber ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>       &lt;span&gt;&#123; number &#125;&lt;/span&gt;<br>       &lt;button onClick=&#123; <span class="hljs-function">()=&gt;</span> setNumber(number + <span class="hljs-number">1</span>) &#125; &gt;点击&lt;/button&gt;<br>           &lt;ul&gt;<br>               &#123;<br>                useMemo(<span class="hljs-function">()=&gt;</span>(list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>                    <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1111</span>)<br>                    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span> &#125;  &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>                &#125;)),[ list ])<br>               &#125;<br>           &lt;/ul&gt;<br>        &#123; useMemo(<span class="hljs-function">()=&gt;</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ChildrenComponent</span> /&gt;</span></span>,[]) &#125;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>有状态组件</strong></p><p>在<code>class</code>声明的组件中，没有像 <code>useMemo</code> 的API ，但是也并不等于束手无策，我们可以通过 <code>react.memo</code> 来阻拦来自组件本身的更新。我们可以写一个组件，来控制<code>react</code> 组件更新的方向。我们通过一个 <code>&lt;NotUpdate&gt;</code> 组件来阻断更新流。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Index</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>&lt;<span class="hljs-title">any</span>,<span class="hljs-title">any</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">prop</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(prop)<br>        <span class="hljs-built_in">this</span>.state = &#123; <br>            list: [ &#123; <span class="hljs-attr">id</span>:<span class="hljs-number">1</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xixi&#x27;</span> &#125; ,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">2</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;haha&#x27;</span> &#125;,&#123; <span class="hljs-attr">id</span>:<span class="hljs-number">3</span> , <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;heihei&#x27;</span> &#125; ],<br>            number:<span class="hljs-number">0</span>,<br>         &#125;<br>    &#125;<br>    handerClick = <span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-built_in">this</span>.setState(&#123; <span class="hljs-attr">number</span>:<span class="hljs-built_in">this</span>.state.number + <span class="hljs-number">1</span> &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>       <span class="hljs-keyword">const</span> &#123; list &#125;:any = <span class="hljs-built_in">this</span>.state<br>       <span class="hljs-keyword">return</span> &lt;div&gt;<br>           &lt;button onClick=&#123; <span class="hljs-built_in">this</span>.handerClick &#125; &gt;点击&lt;/button&gt;<br>           &lt;NotUpdate&gt;<br>              &#123;<span class="hljs-function">()=&gt;</span>(&lt;ul&gt;<br>                    &#123;<br>                    list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span>&#123;<br>                        <span class="hljs-built_in">console</span>.log(<span class="hljs-number">1111</span>)<br>                        <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span> &#125;  &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>                    &#125;)<br>                    &#125;<br>                &lt;/ul&gt;)&#125;<br>           &lt;/NotUpdate&gt;<br>           &lt;NotUpdate&gt;<br>                &lt;ChildrenComponent /&gt;<br>           &lt;/NotUpdate&gt;<br>          <br>       &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/* 控制更新 ,第二个参数可以作为组件更新的依赖 ， 这里设置为 ()=&gt; true 只渲染一次 */</span><br><span class="hljs-keyword">const</span> NotUpdate = React.memo(<span class="hljs-function">(<span class="hljs-params">&#123; children &#125;:any</span>)=&gt;</span> <span class="hljs-keyword">typeof</span> children === <span class="hljs-string">&#x27;function&#x27;</span> ? children() : children ,<span class="hljs-function">()=&gt;</span><span class="hljs-literal">true</span>)<br></code></pre></div></td></tr></table></figure><ul><li>memo 函数定义</li></ul><figure class="highlight typescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs typescript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">memo</span>&lt;<span class="hljs-title">Props</span>&gt;(<span class="hljs-params"></span></span><br><span class="hljs-function"><span class="hljs-params">  <span class="hljs-keyword">type</span>: React$ElementType,</span></span><br><span class="hljs-function"><span class="hljs-params">  compare?: (oldProps: Props, newProps: Props) =&gt; <span class="hljs-built_in">boolean</span>,</span></span><br><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">return</span> &#123;<br>    $$typeof: REACT_MEMO_TYPE,<br>    <span class="hljs-keyword">type</span>,<br>    compare: compare === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : compare,<br>  &#125;;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中：</p><ul><li><code>type</code>：表示自定义的 React 组件；</li><li><code>compare</code>：表示自定义的性能优化函数，类似<code>shouldcomponentupdate</code>生命周期函数；</li></ul><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">MyComponent</span>(<span class="hljs-params">props</span>) </span>&#123;<br>  <span class="hljs-comment">/* 使用 props 渲染 */</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">areEqual</span>(<span class="hljs-params">prevProps, nextProps</span>) </span>&#123;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  如果把 nextProps 传入 render 方法的返回结果与</span><br><span class="hljs-comment">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span><br><span class="hljs-comment">  否则返回 false</span><br><span class="hljs-comment">  */</span><br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> React.memo(MyComponent, areEqual);<br></code></pre></div></td></tr></table></figure><p>此方法仅作为性能优化的方式而存在。但请不要依赖它来“阻止”渲染，因为这会产生 bug。</p><blockquote><p>注意 与 <code>class</code> 组件中 <code>shouldComponentUpdate()</code> 方法不同的是，如果 <code>props</code> 相等，<code>areEqual</code> 会返回 <code>true</code>；如果 <code>props</code> 不相等，则返回 <code>false</code>。这与 <code>shouldComponentUpdate</code> 方法的返回值相反。</p></blockquote><p><img src="https://picture-transmission.iplus-studio.top/6401.webp"> </p><p>没错，用的就是 <code>React.memo</code>，生成了阻断更新的隔离单元，如果我们想要控制更新，可以对 <code>React.memo</code> 第二个参数入手， <code>demo</code>项目中完全阻断的更新。</p><h2 id="④-‘取缔’state，学会使用缓存。"><a href="#④-‘取缔’state，学会使用缓存。" class="headerlink" title="④ ‘取缔’state，学会使用缓存。"></a>④ ‘取缔’state，学会使用缓存。</h2><p>这里的取缔<code>state</code>，并完全不使用<code>state</code>来管理数据，而是善于使用<code>state</code>,知道什么时候使用,怎么使用。<code>react</code> 并不像 <code>vue</code> 那样响应式数据流。在 <code>vue</code> 中有专门的<code>dep</code>做依赖收集，可以自动收集字符串模版的依赖项，只要没有引用的<code>data</code>数据， 通过 <code>this.aaa = bbb</code> ,在<code>vue</code>中是不会更新渲染的。因为 <code>aaa</code> 的<code>dep</code>没有收集渲染<code>watcher</code>依赖项。在<code>react</code>中，我们触发<code>this.setState</code> 或者 <code>useState</code>，只会关心两次<code>state</code>值是否相同，来触发渲染，根本不会在乎<code>jsx</code>语法中是否真正的引入了正确的值。</p><p>没有更新作用的state</p><p><strong>有状态组件中</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    state=&#123; <span class="hljs-attr">text</span>:<span class="hljs-number">111</span> &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; a &#125; = <span class="hljs-built_in">this</span>.props<br>         <span class="hljs-comment">/* 我们只是希望在初始化,用text记录 props中 a 的值 */</span><br>        <span class="hljs-built_in">this</span>.setState(&#123;<br>            text:a<br>        &#125;)    <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">/* 没有引入text */</span><br>       <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#x27;hello,world&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如上例子中,<code>render</code>函数中并没有引入<code>text</code> ,我们只是希望在初始化的时候，用 <code>text</code> 记录 <code>props</code> 中 <code>a</code> 的值。我们却用 <code>setState</code> 触发了一次无用的更新。无状态组件中情况也一样存在，具体如下。</p><p><strong>无状态组件中</strong></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Demo</span> (<span class="hljs-params">&#123; a &#125;</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [text , setText] = useState(<span class="hljs-number">111</span>)<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        setText(a)<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>         &#123;<span class="hljs-string">&#x27;hello,world&#x27;</span>&#125;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>改为缓存</p><p><strong>有状态组件中</strong></p><p>在<code>class</code>声明组件中，我们可以直接把数据绑定给<code>this</code>上，来作为数据缓存。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    text = <span class="hljs-number">111</span><br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; a &#125; = <span class="hljs-built_in">this</span>.props<br>        <span class="hljs-comment">/* 数据直接保存在text上 */</span><br>        <span class="hljs-built_in">this</span>.text = a<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">/* 没有引入text */</span><br>       <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>&#123;&#x27;hello,world&#x27;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>无状态组件中</strong></p><p>在无状态组件中, 我们不能往问<code>this</code>,但是我们可以用<code>useRef</code>来解决问题。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Demo</span> (<span class="hljs-params">&#123; a &#125;</span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> text = useRef(<span class="hljs-number">111</span>)<br>    useEffect(<span class="hljs-function">()=&gt;</span>&#123;<br>        text.current = a<br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> &lt;div&gt;<br>        &#123;<span class="hljs-string">&#x27;hello,world&#x27;</span>&#125;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="⑤-useCallback回调"><a href="#⑤-useCallback回调" class="headerlink" title="⑤ useCallback回调"></a>⑤ useCallback回调</h2><p><code>useCallback</code> 的真正目的还是在于缓存了每次渲染时 <code>inline callback</code> 的实例，这样方便配合上子组件的 <code>shouldComponentUpdate</code> 或者 <code>React.memo</code> 起到减少不必要的渲染的作用。对子组件的渲染限定来源与，对子组件<code>props</code>比较，但是如果对父组件的<code>callback</code>做比较，无状态组件每次渲染执行，都会形成新的<code>callback</code>, 是无法比较，所以需要对<code>callback</code>做一个 <code>memoize</code> 记忆功能，我们可以理解为<code>useCallback</code>就是 <code>callback</code>加了一个<code>memoize</code>。我们接着往下看👇👇👇。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ number , setNumber ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> &lt;div&gt;  <br>        &lt;DemoComponent  handerChange=&#123; <span class="hljs-function">()=&gt;</span>&#123; setNumber(number+<span class="hljs-number">1</span>)  &#125; &#125; /&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>或着</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ number , setNumber ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> handerChange = <span class="hljs-function">()=&gt;</span>&#123;<br>        setNumber(number+<span class="hljs-number">1</span>) <br>    &#125;<br>    <span class="hljs-keyword">return</span> &lt;div&gt;  <br>        &lt;DemoComponent  handerChange=&#123; handerChange &#125; /&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>无论是上述那种方式，<code>pureComponent</code> 和 <code>react.memo</code> 通过浅比较方式，只能判断每次更新都是新的<code>callback</code>，然后触发渲染更新。<code>useCallback</code>给加了一个记忆功能，告诉我们子组件，两次是相同的 <code>callback</code>无需重新更新页面。至于什么时候<code>callback</code>更改，就要取决于 <code>useCallback</code> 第二个参数。好的，将上述<code>demo</code>我们用 <code>useCallback</code> 重写。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">demo</span> (<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">const</span> [ number , setNumber ] = useState(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">const</span> handerChange = useCallback( <span class="hljs-function">()=&gt;</span>&#123;<br>        setNumber(number+<span class="hljs-number">1</span>) <br>    &#125;,[])<br>    <span class="hljs-keyword">return</span> &lt;div&gt;  <br>        &lt;DemoComponent  handerChange=&#123; handerChange &#125; /&gt;<br>    &lt;/div&gt;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样 <code>pureComponent</code> 和 <code>react.memo</code> 可以直接判断是<code>callback</code>没有改变，防止了不必要渲染。</p><h1 id="七-中规中矩的使用状态管理"><a href="#七-中规中矩的使用状态管理" class="headerlink" title="七 中规中矩的使用状态管理"></a>七 中规中矩的使用状态管理</h1><p>无论我们使用的是<code>redux</code>还是说 <code>redux</code> 衍生出来的 <code>dva</code> ,<code>redux-saga</code>等,或者是<code>mobx</code>，都要遵循一定’使用规则’，首先让我想到的是，什么时候用状态管理，怎么合理的应用状态管理，接下来我们来分析一下。</p><h2 id="什么时候使用状态管理"><a href="#什么时候使用状态管理" class="headerlink" title="什么时候使用状态管理"></a>什么时候使用状态管理</h2><p>要问我什么时候适合使用状态状态管理。我一定会这么分析，首先状态管理是为了解决什么问题，状态管理能够解决的问题主要分为两个方面，一 就是解决跨层级组件通信问题 。二 就是对一些全局公共状态的缓存。</p><p>我们那redux系列的状态管理为例子。</p><p>我见过又同学这么写的</p><p>滥用状态管理</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-comment">/* 和 store下面text模块的list列表，建立起依赖关系，list更新，组件重新渲染 */</span><br>@connect(<span class="hljs-function">(<span class="hljs-params">store</span>)=&gt;</span>(&#123; <span class="hljs-attr">list</span>:store.text.list &#125;))<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">prop</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(prop)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-comment">/* 初始化请求数据 */</span><br>        <span class="hljs-built_in">this</span>.getList()<br>    &#125;<br>    getList=<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; dispatch &#125; = <span class="hljs-built_in">this</span>.props<br>        <span class="hljs-comment">/* 获取数据 */</span><br>        dispatch(&#123; <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;text/getDataList&#x27;</span> &#125;)<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; list &#125; = <span class="hljs-built_in">this</span>.props<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &#123;<br>                list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span> &#125; &gt;</span></span><br><span class="xml">                    &#123; /*  做一些渲染页面的操作....  */ &#125;</span><br><span class="xml">                <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>)<br>            &#125;<br>            &lt;button onClick=&#123; <span class="hljs-function">()=&gt;</span><span class="hljs-built_in">this</span>.getList() &#125; &gt;重新获取列表&lt;/button&gt;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样页面请求数据，到数据更新，全部在当前组件发生，这个写法我不推荐，此时的数据走了一遍状态管理,最终还是回到了组件本身，显得很鸡肋，并没有发挥什么作用。在性能优化上到不如直接在组件内部请求数据。</p><h2 id="不会合理使用状态管理"><a href="#不会合理使用状态管理" class="headerlink" title="不会合理使用状态管理"></a>不会合理使用状态管理</h2><p>还有的同学可能这么写。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Text</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">prop</span>)</span>&#123;<br>        <span class="hljs-built_in">super</span>(prop)<br>        <span class="hljs-built_in">this</span>.state=&#123;<br>            list:[],<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-title">componentDidMount</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; data , code &#125; = <span class="hljs-keyword">await</span> getList()<br>        <span class="hljs-keyword">if</span>(code === <span class="hljs-number">200</span>)&#123;<br>            <span class="hljs-comment">/*  获取的数据有可能是不常变的，多个页面需要的数据  */</span><br>            <span class="hljs-built_in">this</span>.setState(&#123;<br>                list:data<br>            &#125;)<br>        &#125;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">const</span> &#123; list &#125; = <span class="hljs-built_in">this</span>.state<br>        <span class="hljs-keyword">return</span> &lt;div&gt;<br>            &#123; <span class="hljs-comment">/*  下拉框 */</span> &#125;<br>            &lt;select&gt;<br>               &#123;<br>                  list.map(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&#123;</span> <span class="hljs-attr">item.id</span> &#125; &gt;</span>&#123; item.name &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span></span>) <br>               &#125;<br>            &lt;/select&gt;<br>        &lt;/div&gt;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于不变的数据，多个页面或组件需要的数据，为了避免重复请求,我们可以将数据放在状态管理里面。</p><p><strong>不变的数据，多个页面可能需要的数据，放在状态管理中，对于时常变化的数据，我们可以直接请求接口</strong></p><h1 id="八-海量数据优化-时间分片，虚拟列表"><a href="#八-海量数据优化-时间分片，虚拟列表" class="headerlink" title="八 海量数据优化-时间分片，虚拟列表"></a>八 海量数据优化-时间分片，虚拟列表</h1><p>略</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
      <tag>react</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac OSX安装MongoDB</title>
    <link href="/2020/12/29/Mac-OSX%E5%AE%89%E8%A3%85MongoDB/"/>
    <url>/2020/12/29/Mac-OSX%E5%AE%89%E8%A3%85MongoDB/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/">官网教程</a></p><p>通过<code>Homebrew</code>安装，方便快捷省事。</p><p>按照官网教程装完后：</p><ul><li><p>配置文件 (<code>/usr/local/etc/mongod.conf</code>)</p></li><li><p>日志目录路径 (<code>/usr/local/var/log/mongodb</code>)</p></li><li><p>数据目录路径 (<code>/usr/local/var/mongodb</code>) 数据库文件都存在这里</p></li></ul><p>此时运行  <code>mongod -version</code>  会打印出安装版本证明安装成功</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_21-17-55.png"></p><h1 id="启动-MongoDB-服务"><a href="#启动-MongoDB-服务" class="headerlink" title="启动 MongoDB 服务"></a>启动 MongoDB 服务</h1><ul><li>使用 <code>brew</code> 将 <code>MongoDB</code> 作为 <code>macOS</code> 服务运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 启动</span><br>brew services start mongodb-community@4.4<br><span class="hljs-comment"># 停止</span><br>brew services stop mongodb-community@4.4<br></code></pre></div></td></tr></table></figure><ul><li>作为后台启动</li></ul><p><code>mongod --config /usr/local/etc/mongod.conf --fork</code></p><ul><li>可以通过下面命令查看正在运行的 <code>MongoDB</code> 服务 </li></ul><p><code>brew services list</code></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_21-25-33.png"></p><ul><li>如果是后台启动的</li></ul><p><code>ps aux | grep -v grep | grep mongod</code></p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_21-26-36.png"></p><h1 id="连接并使用-MongoDB"><a href="#连接并使用-MongoDB" class="headerlink" title="连接并使用 MongoDB"></a>连接并使用 MongoDB</h1><p>启动了<code>MongoDB</code>后，就可以连接使用了。</p><p>运行  <code>mongo</code>  连接服务，可以看到成功连接 <code>mongo</code> 服务。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_21-22-35.png"></p>]]></content>
    
    
    <categories>
      
      <category>后台</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MongoDB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css伪类和伪元素</title>
    <link href="/2020/12/29/css%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    <url>/2020/12/29/css%E4%BC%AA%E7%B1%BB%E5%92%8C%E4%BC%AA%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[<blockquote><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements">https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements</a></p></blockquote><h1 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h1><p>伪类选择器（简称：伪类）通过冒号来定义，它定义了元素的状态，如点击按下，点击完成等，通过伪类可以为元素的状态修改样式。</p><blockquote><p>:pseudo-class-name</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">120%</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125; <br></code></pre></div></td></tr></table></figure><p>下面逐一详细看一下</p><ul><li><a href="#active">:active</a></li><li><a href="#any-link">:any-link</a></li><li><a href="#checked">:checked</a></li><li><a href="#default">:default</a></li><li><a href="#dir">:dir</a></li><li><a href="#disabled">:disabled</a></li><li><a href="#enabled">:enabled</a></li><li><a href="#empty">:empty</a></li><li><a href="#first-child">:first-child</a></li><li><a href="#last-child">:last-child</a></li><li><a href="#nth-child">:nth-child</a></li><li><a href="#only-child">:only-child</a></li><li><a href="#first-of-type">:first-of-type</a></li><li><a href="#last-of-type">:last-of-type</a></li><li><a href="#focus">:focus</a></li><li><a href="#focus-within">:focus-within</a></li><li><a href="#hover">:hover</a></li><li><a href="#indeterminate">:indeterminate</a></li><li><a href="#in-range">:in-range</a></li><li><a href="#out-of-range">:out-of-range</a></li><li><a href="#invalid">:invalid</a></li><li><a href="#valid">:valid</a></li><li><a href="#lang">:lang</a></li><li><a href="#link">:link</a></li><li><a href="#visited">:visited</a></li><li><a href="#is">:is</a></li><li><a href="#not">:not</a></li><li><a href="#optional">:optional</a></li><li><a href="#playing">:playing</a></li><li><a href="#paused">:paused</a></li><li><a href="#read-only">:read-only</a></li><li><a href="#read-write">:read-write</a></li><li><a href="#required">:required</a></li><li><a href="#root">:root</a></li></ul><h2 id="active"><a href="#active" class="headerlink" title="active"></a>active</h2><blockquote><p>在用户激活（例如点击）元素的时候匹配。这个是比较常用的。</p></blockquote><p>当用鼠标交互时，它代表的是用户<strong>按下按键和松开按键之间的时间</strong>。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>为保证样式生效，需要把 <code>:active</code> 的样式放在所有链接相关的样式之后。这种链接伪类先后顺序被称为 <em>LVHA</em> 顺序：<code>:link</code> — <code>:visited</code> — <code>:hover</code> — <code>:active</code>。</p><h2 id="any-link"><a href="#any-link" class="headerlink" title="any-link"></a>any-link</h2><blockquote><p>匹配任意一个链接的:link和:visited状态。</p></blockquote><p>它会匹配每一个有 <code>href</code> 属性的 <code>&lt;a&gt;</code>、<code>&lt;area&gt;</code> 或 <code>&lt;link&gt;</code> 元素</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 选中任意匹配 :link 和 :visited 元素*/</span><br><span class="hljs-selector-pseudo">:any-link</span> &#123;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="checked"><a href="#checked" class="headerlink" title="checked"></a>checked</h2><blockquote><p>匹配处于选中状态的单选或者复选框。</p></blockquote><p>用户通过勾选/选中元素或取消勾选/取消选中，来改变该元素的 <code>:checked</code> 状态。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 匹配任意被勾选/选中的radio(单选按钮),checkbox(复选框),或者option(select中的一项) */</span><br><span class="hljs-selector-pseudo">:checked</span> &#123;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">25px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>&#125; <br></code></pre></div></td></tr></table></figure><h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><blockquote><p>表示一组相关元素中的默认表单元素</p></blockquote><p>该选择器可以在 <code>&lt;button&gt;</code>, <code>&lt;input type=&quot;checkbox&quot;&gt;</code>, <code>&lt;input type=&quot;radio&quot;&gt;</code>, 以及 <code>&lt;option&gt;</code> 上使用。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* Selects any default &lt;input&gt; */</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:default</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: lime;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h2><blockquote><p><code>:dir</code>伪类选择文档中指定了语言方向的元素。换句话说，为了使用<code>:dir</code>伪类，需要在标记中为相关元素指定<code>dir</code>属性。</p></blockquote><p>语言方向目前有两种：<code>ltr</code>（从左到右）和 <code>rtl</code>（从右往左）。</p><p>写这篇文章时，支持:<code>dir</code>伪类的只有Firefox（<code>-moz-dir()</code>），</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">article</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">&quot;rtl&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>التدليك واحد من أقدم العلوم الصحية التي عرفها الانسان والذي يتم استخدامه لأغراض الشفاء منذ ولاده الطفل.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 带前缀 */</span><br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-pseudo">:-moz-dir(rtl)</span> &#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br><br><span class="hljs-comment">/* 不带前缀 */</span><br><span class="hljs-selector-tag">article</span> <span class="hljs-selector-pseudo">:dir(rtl)</span> &#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="disabled"><a href="#disabled" class="headerlink" title="disabled"></a>disabled</h2><blockquote><p><code>:disabled</code>伪类选择禁用状态的表单元素</p></blockquote><p>处于禁用状态的元素，不能被选中、勾选，不能获得焦点。</p><p>在下面的例子中，<code>name</code>输入框处于禁用状态，因此会半透明。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">disabled</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:disabled</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: .<span class="hljs-number">5</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="enabled"><a href="#enabled" class="headerlink" title="enabled"></a>enabled</h2><blockquote><p>与<code>disabled</code>相反，所有表单元素默认都是启用的，除非在标记中添加了disabled属性。</p></blockquote><p>通过<code>:enabled</code>和<code>:disabled</code>可以提供视觉上的反馈，改善用户体验。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 选择任何启用状态的 &lt;input&gt; */</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:enabled</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看示例：<a href="http://codepen.io/ricardozea/pen/zqYQxq">http://codepen.io/ricardozea/pen/zqYQxq</a></p><h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><blockquote><p>代表没有子元素的元素。子元素只可以是元素节点或文本（包括空格）。</p></blockquote><p>只要包含一个字母、其他HTML元素，甚至一个空格，都不算空。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><span class="hljs-comment">&lt;!-- I will be lime --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span>I will be pink<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- I will be red because of the whitespace around this comment --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">background</span>: pink;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">80px</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">80px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:empty</span> &#123;<br>    <span class="hljs-attribute">background</span>: lime;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_12-07-45.png"></p><h2 id="first-child"><a href="#first-child" class="headerlink" title="first-child"></a>first-child</h2><blockquote><p><code>:first-child</code>表示在一组兄弟元素中的第一个元素。这个是比较常用的。</p></blockquote><p>下面的例子中，只有第一个p标签会应用到样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This text is selected!<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This text isn&#x27;t selected.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>This text isn&#x27;t selected: it&#x27;s not a `p`.<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This text isn&#x27;t selected.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>    <span class="hljs-attribute">color</span>: lime;<br>    <span class="hljs-attribute">background-color</span>: black;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_14-31-53.png"></p><p>再看一个常用在<code>ul</code> <code>li</code>中的。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 3<br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 3.1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 3.2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Item 3.3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br><br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:first-child</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_14-32-02.png"></p><h2 id="last-child"><a href="#last-child" class="headerlink" title="last-child"></a>last-child</h2><blockquote><p>代表父元素的最后一个子元素。这个是比较常用的。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>此元素背景色不是lime<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我的也不是lime。<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>我的才是lime！ :)<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:last-child</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: lime;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-51-32.png"></p><h2 id="nth-child"><a href="#nth-child" class="headerlink" title="nth-child"></a>nth-child</h2><blockquote><p>首先找到所有当前元素的兄弟元素，然后按照位置先后顺序从1开始排序，选择的结果为CSS伪类<code>:nth-child</code>括号中表达式<code>（an+b）</code>匹配到的元素集合<code>（n=0，1，2，3...）</code></p></blockquote><p>示例：</p><ul><li><p><code>0n+3</code> 或简单的 3 匹配第三个元素。</p></li><li><p><code>1n+0</code> 或简单的 n 匹配每个元素。（兼容性提醒：在 Android 浏览器 4.3 以下的版本 n 和 1n 的匹配方式不一致。1n 和 1n+0 是一致的，可根据喜好任选其一来使用。）</p></li><li><p><code>2n+0</code> 或简单的 2n 匹配位置为 2、4、6、8…的元素（n=0时，2n+0=0，第0个元素不存在，因为是从1开始排序)。你可以使用关键字 even 来替换此表达式。</p></li><li><p><code>2n+1</code> 匹配位置为 1、3、5、7…的元素。你可以使用关键字 odd 来替换此表达式。</p></li><li><p><code>3n+4</code> 匹配位置为 4、7、10、13…的元素。</p></li><li><p><code>tr:nth-child(2n+1)</code><br>  表示HTML表格中的奇数行。</p></li><li><p><code>tr:nth-child(odd)</code><br>  表示HTML表格中的奇数行。</p></li><li><p><code>tr:nth-child(2n)</code><br>  表示HTML表格中的偶数行。</p></li><li><p><code>tr:nth-child(even)</code><br>  表示HTML表格中的偶数行。</p></li><li><p><code>span:nth-child(0n+1)</code><br>  表示子元素中第一个且为span的元素，与 :first-child 选择器作用相同。</p></li><li><p><code>span:nth-child(1)</code><br>  表示父元素中子元素为第一的并且名字为span的标签被选中</p></li><li><p><code>span:nth-child(-n+3)</code><br>  匹配前三个子元素中的span元素。</p></li></ul><h2 id="only-child"><a href="#only-child" class="headerlink" title="only-child"></a>only-child</h2><blockquote><p>选择父元素中唯一的子元素。</p></blockquote><p>在下面的例子中，第一个<code>ul</code>只有一个子元素，因此该子元素将变成橙色。第二个<code>ul</code>有多个子元素，因此其子元素不会受<code>:only-child</code>伪类影响。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>This text will be orange.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-pseudo">:only-child</span> &#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="first-of-type"><a href="#first-of-type" class="headerlink" title="first-of-type"></a>first-of-type</h2><blockquote><p>选择父元素容器内任意类型子元素的第一个元素。</p></blockquote><p>在下面的例子中，第一个<code>li</code>元素和第一个<code>span</code>元素的文本才是橙色的。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>This text will be orange.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Lorem ipsum dolor sit amet. <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>This text will be orange.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-pseudo">:first-of-type</span> &#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="last-of-type"><a href="#last-of-type" class="headerlink" title="last-of-type"></a>last-of-type</h2><blockquote><p><code>:last-of-type</code>伪类选择父元素容器内任意类型子元素的最后一个元素。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span> <span class="hljs-selector-tag">em</span><span class="hljs-selector-pseudo">:last-of-type</span> &#123;<br>  <span class="hljs-attribute">color</span>: lime;<br>&#125;<br>``` <br><br>```<span class="hljs-selector-tag">html</span><br>&lt;<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;<span class="hljs-selector-tag">em</span>&gt;我没有颜色 <span class="hljs-selector-pseudo">:(</span>&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">strong</span>&gt;我没有颜色 <span class="hljs-selector-pseudo">:(</span>&lt;/<span class="hljs-selector-tag">strong</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">em</span>&gt;我有颜色 <span class="hljs-selector-pseudo">:D</span>&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">strong</span>&gt;我也没有颜色 <span class="hljs-selector-pseudo">:(</span>&lt;/<span class="hljs-selector-tag">strong</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br><br>&lt;<span class="hljs-selector-tag">p</span>&gt;<br>  &lt;<span class="hljs-selector-tag">em</span>&gt;我没有颜色 <span class="hljs-selector-pseudo">:(</span>&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">span</span>&gt;&lt;<span class="hljs-selector-tag">em</span>&gt;我有颜色!&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;/<span class="hljs-selector-tag">span</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">strong</span>&gt;我没有颜色 <span class="hljs-selector-pseudo">:(</span>&lt;/<span class="hljs-selector-tag">strong</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">em</span>&gt;我有颜色 <span class="hljs-selector-pseudo">:D</span>&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">span</span>&gt;<br>    &lt;<span class="hljs-selector-tag">em</span>&gt;我在子元素里，但没有颜色!&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>    &lt;span style=&quot;text-decoration:line-through;&quot;&gt; 我没有颜色 &lt;/span&gt;&lt;br&gt;<br>    &lt;<span class="hljs-selector-tag">em</span>&gt;我却有颜色！&lt;/<span class="hljs-selector-tag">em</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;/<span class="hljs-selector-tag">span</span>&gt;&lt;<span class="hljs-selector-tag">br</span>&gt;<br>  &lt;<span class="hljs-selector-tag">strong</span>&gt;我也没有颜色 <span class="hljs-selector-pseudo">:(</span>&lt;/<span class="hljs-selector-tag">strong</span>&gt;<br>&lt;/<span class="hljs-selector-tag">p</span>&gt;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-53-20.png"></p><h2 id="focus"><a href="#focus" class="headerlink" title="focus"></a>focus</h2><blockquote><p><code>:focus</code>表示获得焦点的元素（如表单输入）。当用户点击或触摸元素或通过键盘的 “tab” 键选择它时会被触发。</p></blockquote><p>在表单里使用得非常多。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* Selects any &lt;input&gt; when focused */</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>    <span class="hljs-attribute">color</span>: red;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="focus-within"><a href="#focus-within" class="headerlink" title="focus-within"></a>focus-within</h2><blockquote><p>表示一个元素获得焦点，或，该元素的后代元素获得焦点。换句话说，元素自身或者它的某个后代匹配 <code>:focus</code> 伪类。</p></blockquote><p>该选择器非常实用。举个通俗的例子：表单中的某个 <code>&lt;input&gt;</code> 字段获得焦点时，整个表单的 <code>&lt;form&gt;</code> 元素都可被高亮。</p><p>此例子中，当表单某个文本输入框获得焦点后，表单会被设置颜色样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>试试在这个表单中输入点什么。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;given_name&quot;</span>&gt;</span>Given Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;given_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;family_name&quot;</span>&gt;</span>Family Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;family_name&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">form</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>    <span class="hljs-attribute">color</span>: gray;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">4px</span>;<br>&#125;<br><br><span class="hljs-selector-tag">form</span><span class="hljs-selector-pseudo">:focus-within</span> &#123;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-number">#ff8</span>;<br>    <span class="hljs-attribute">color</span>: black;<br>&#125;<br><br><span class="hljs-selector-tag">input</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">4px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Kapture%202020-12-29%20at%2015.10.35.gif"></p><h2 id="hover"><a href="#hover" class="headerlink" title="hover"></a>hover</h2><blockquote><p>在用户指针悬停时生效。而且它不只可以用于链接，<code>:hover</code>伪类可以任何伪元素上使用。这个是比较常用的。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: orange;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看示例：<a href="https://codepen.io/ricardozea/pen/vGEzJK">https://codepen.io/ricardozea/pen/vGEzJK</a></p><h2 id="indeterminate"><a href="#indeterminate" class="headerlink" title="indeterminate"></a>indeterminate</h2><blockquote><p><code>:indeterminate</code>伪类选择单选按钮或复选框在页面加载时没有被勾选的。</p></blockquote><p>比如，页面加载后，一组单选按钮中没有默认或预先勾选的，或者一个复选框已经通过<code>JavaScript</code>设置为<code>indeterminate</code>状态。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;checkbox&quot;</span>&gt;</span>Background should be green<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;radio&quot;</span>&gt;</span>Background should be green<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">var</span> inputs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;input&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; inputs.length; i++) &#123;<br>  inputs[i].indeterminate = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span>, <span class="hljs-selector-tag">span</span> &#123;<br>    <span class="hljs-attribute">background</span>: red;<br>&#125;<br><br><span class="hljs-selector-pseudo">:indeterminate</span>, <span class="hljs-selector-pseudo">:indeterminate</span> + <span class="hljs-selector-tag">label</span> &#123;<br>    <span class="hljs-attribute">background</span>: lime;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>页面一进来的时候：</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-29-03.png"></p><p>选中之后：</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-29-13.png"></p><h2 id="in-range"><a href="#in-range" class="headerlink" title="in-range"></a>in-range</h2><blockquote><p>代表一个 <code>&lt;input&gt;</code> 元素，其当前值处于属性 <code>min</code> 和 <code>max</code> 限定的范围之内.</p></blockquote><h2 id="out-of-range"><a href="#out-of-range" class="headerlink" title="out-of-range"></a>out-of-range</h2><blockquote><p>表示一个 <code>&lt;input&gt;</code> 元素，其当前值处于属性 <code>min</code> 和 <code>max</code> 限定的范围外。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;form1&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>Values between 1 and 10 are valid.<br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;value1&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;1 to 10&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;value1&quot;</span>&gt;</span>Your value is <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">list-style</span>: none;<br>    <span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">1em</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid black;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:in-range</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>);<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:out-of-range</span> &#123;<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.25</span>);<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid red;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:in-range</span> + <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;okay.&#x27;</span>;<br>&#125;<br><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:out-of-range</span> + <span class="hljs-selector-tag">label</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&#x27;out of range!&#x27;</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当<code>input</code>在范围当时候：</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-34-53.png"></p><p>当<code>input</code>不在范围当时候：</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-35-01.png"></p><h2 id="invalid"><a href="#invalid" class="headerlink" title="invalid"></a>invalid</h2><blockquote><p><code>:invalid</code>伪类选择输入格式不符合要求的表单元素。这个伪类对于突出显示用户的字段错误非常有用。</p></blockquote><p>在下面的例子中，email输入框中的电子邮箱格式不正确，因此这个输入框会被认为无效，将出现橙色边框：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-attr">[type=email]</span><span class="hljs-selector-pseudo">:invalid</span> &#123;<br>    <span class="hljs-attribute">background</span>: orange;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>看示例：<a href="http://codepen.io/ricardozea/pen/bEzqVg">http://codepen.io/ricardozea/pen/bEzqVg</a></p><h2 id="valid"><a href="#valid" class="headerlink" title="valid"></a>valid</h2><blockquote><p>CSS 伪类表示内容验证正确的 <code>&lt;input&gt;</code> 或其他 <code>&lt;form&gt;</code> 元素。这能简单地将校验字段展示为一种能让用户辨别出其输入数据的正确性的样式。</p></blockquote><p>该伪类对于高亮正确字段是很有用的。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* Selects any valid &lt;input&gt; */</span><br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:valid</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: powderblue;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h2><blockquote><p>基于元素语言来匹配页面元素。</p></blockquote><p>通过<code>lang=&quot;&quot;</code>属性、相应的<code>meta</code>元素以及<code>HTTP</code>首部的协议信息来确定。</p><p><code>lang=&quot;&quot;</code>属性常用于<code>html</code>标签，其实也可以用于其他标签。</p><p>下面看看怎么通过CSS来添加引用标记。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>This English quote has a<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>nested<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;<span class="hljs-name">quote</span></span> inside.<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;fr&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>This French quote has a<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>nested<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;<span class="hljs-name">quote</span></span> inside.<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;de&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>This German quote has a<span class="hljs-tag">&lt;<span class="hljs-name">q</span>&gt;</span>nested<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;<span class="hljs-name">quote</span></span> inside.<span class="hljs-tag">&lt;/<span class="hljs-name">q</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:lang(en)</span> &gt; <span class="hljs-selector-tag">q</span> &#123; <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;\201C&#x27;</span> <span class="hljs-string">&#x27;\201D&#x27;</span> <span class="hljs-string">&#x27;\2018&#x27;</span> <span class="hljs-string">&#x27;\2019&#x27;</span>; &#125;<br><span class="hljs-selector-pseudo">:lang(fr)</span> &gt; <span class="hljs-selector-tag">q</span> &#123; <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;« &#x27;</span> <span class="hljs-string">&#x27; »&#x27;</span>; &#125;<br><span class="hljs-selector-pseudo">:lang(de)</span> &gt; <span class="hljs-selector-tag">q</span> &#123; <span class="hljs-attribute">quotes</span>: <span class="hljs-string">&#x27;»&#x27;</span> <span class="hljs-string">&#x27;«&#x27;</span> <span class="hljs-string">&#x27;\2039&#x27;</span> <span class="hljs-string">&#x27;\203A&#x27;</span>; &#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_15-48-57.png"></p><h2 id="link"><a href="#link" class="headerlink" title="link"></a>link</h2><blockquote><p><code>:link</code>伪类选择器是用来选中元素当中的链接。它将会选中所有尚未访问的链接，包括那些已经给定了其他伪类选择器的链接（例如<code>:hover</code>选择器，<code>:active</code>选择器，<code>:visited</code>选择器）。</p></blockquote><h2 id="visited"><a href="#visited" class="headerlink" title="visited"></a>visited</h2><blockquote><p>表示用户已访问过的链接。出于隐私原因，可以使用此选择器修改的样式非常有限。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 所有被访问过的 &lt;a&gt; 变绿 */</span><br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><blockquote><p> CSS 伪类 函数将选择器列表作为参数，并选择该列表中任意一个选择器可以选择的元素。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 选择header, main, footer里的任意一个悬浮状态的段落(p标签) */</span><br><span class="hljs-selector-pseudo">:is(header</span>, <span class="hljs-selector-tag">main</span>, <span class="hljs-selector-tag">footer</span>) <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br><br><span class="hljs-comment">/* 以上内容相当于以下内容 */</span><br><span class="hljs-selector-tag">header</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-tag">main</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-tag">footer</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>:is()</code> 伪类可以大大简化CSS选择器。例如，下面的CSS:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 3-deep (or more) unordered lists use a square */</span><br><span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span>,     <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span>,     <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span>,     <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span>,   <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span>,   <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span>,   <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span>,<br><span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span>,    <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span>,    <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span>,    <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span>,<br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span>,     <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span>,     <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span>,     <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span>,   <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span>,   <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span>,   <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span>,<br><span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span>,    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span>,    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span>,    <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span>,<br><span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span>,   <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span>,   <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span>,   <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span>,<br><span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span>,  <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span>,  <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span>,  <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span>,<br><span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">ul</span>,    <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">ul</span>,    <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">ul</span>,    <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">menu</span>,  <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">menu</span>,  <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">menu</span>,  <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span>,<br><span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ol</span> <span class="hljs-selector-tag">dir</span>,   <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">ul</span> <span class="hljs-selector-tag">dir</span>,   <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">menu</span> <span class="hljs-selector-tag">dir</span>,   <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span> <span class="hljs-selector-tag">dir</span> &#123;<br>  <span class="hljs-attribute">list-style-type</span>: square;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可以被替换为:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 3-deep (or more) unordered lists use a square */</span><br><span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-tag">ul</span>,<br><span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-tag">menu</span>,<br><span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-tag">dir</span> &#123;<br>  <span class="hljs-attribute">list-style-type</span>: square;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是，不要像下面那么做</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-pseudo">:is(ol</span>, <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) <span class="hljs-selector-pseudo">:is(ul</span>, <span class="hljs-selector-tag">menu</span>, <span class="hljs-selector-tag">dir</span>) &#123;<br>  <span class="hljs-attribute">list-style-type</span>: square;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="not"><a href="#not" class="headerlink" title="not"></a>not</h2><blockquote><p><code>:not()</code> 用来匹配不符合一组选择器的元素。由于它的作用是防止特定的元素被选中，它也被称为反选伪类（negation pseudo-class）。</p></blockquote><p>注意：</p><ul><li><code>:not()</code> 伪类不能被嵌套，这意味着 <code>:not(:not(...))</code> 是无效的。</li><li>由于伪元素不是简单的选择器，他们不能被当作 <code>:not()</code> 中的参数，形如 <code>:not(p::before)</code> 这样的选择器将不会工作。</li><li>可以利用这个伪类写一个完全没有用处的选择器。例如， <code>:not(*)</code> 匹配任何非元素的元素，因此，这个规则将永远不会被应用。</li><li>可以利用这个伪类提高规则的优先级。例如， <code>#foo:not(#bar)</code> 和 <code>#foo</code> 会匹配相同的元素，但是前者的优先级更高。</li><li><code>:not(.foo)</code> 将匹配任何非 <code>.foo</code> 的元素，包括 <code>&lt;html&gt;</code> 和 <code>&lt;body&gt;</code>。</li><li>这个选择器只会应用在一个元素上，无法用它来排除所有父元素。比如， <code>body :not(table) a</code> 依旧会应用到表格元素 <code>&lt;table&gt;</code> 内部的 <code>&lt;a&gt;</code> 上, 因为 <code>&lt;tr&gt;</code> 将会被 <code>:not(table)</code> 这部分选择器匹配。</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-comment">/* 选择所有不是段落（p）的元素 */</span><br><span class="hljs-selector-pseudo">:not(p)</span> &#123;<br>  <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>:not()</code> 伪类可以将一个或多个以逗号分隔的选择器列表作为其参数。选择器中不得包含另一个否定选择符或 伪元素。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.fancy</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>: <span class="hljs-number">2px</span> <span class="hljs-number">2px</span> <span class="hljs-number">3px</span> gold;<br>&#125;<br><br><span class="hljs-comment">/* 类名不是 `.fancy` 的 &lt;p&gt; 元素 */</span><br><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">:not(.fancy)</span> &#123;<br>  <span class="hljs-attribute">color</span>: green;<br>&#125;<br><br><span class="hljs-comment">/* 非 &lt;p&gt; 元素 */</span><br><span class="hljs-selector-tag">body</span> <span class="hljs-selector-pseudo">:not(p)</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br><br><span class="hljs-comment">/* 既不是 &lt;div&gt; 也不是 &lt;span&gt; 的元素 */</span><br><span class="hljs-selector-tag">body</span> <span class="hljs-selector-pseudo">:not(div)</span><span class="hljs-selector-pseudo">:not(span)</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;<br><br><span class="hljs-comment">/* 类名不是 `.crazy` 或 `.fancy` 的元素 */</span><br><span class="hljs-comment">/* 注意，此语法尚未获广泛支持。 */</span><br><span class="hljs-selector-tag">body</span> <span class="hljs-selector-pseudo">:not(.crazy</span>, <span class="hljs-selector-class">.fancy</span>) &#123;<br>  <span class="hljs-attribute">font-family</span>: sans-serif;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="optional"><a href="#optional" class="headerlink" title="optional"></a>optional</h2><blockquote><p><code>:optional</code>伪类选择表单中非必填的输入字段。换句话说，只要输入字段中没有<code>required</code>属性，就会被<code>:optional</code>伪类选中。</p></blockquote><p>在下面的例子中，这个数值字段是可以选填的，因此其中的文本将为灰色。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;number&quot;</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:optional</span> &#123;<br>    <span class="hljs-attribute">color</span>: gray;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="playing"><a href="#playing" class="headerlink" title="playing"></a>playing</h2><blockquote><p>匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“播放”的元素。</p></blockquote><h2 id="paused"><a href="#paused" class="headerlink" title="paused"></a>paused</h2><blockquote><p>匹配代表音频、视频或者相似的能“播放”或者“暂停”的资源的，且正在“暂停”的元素。</p></blockquote><h2 id="read-only"><a href="#read-only" class="headerlink" title="read-only"></a>read-only</h2><blockquote><p>匹配用户不可更改的元素。</p></blockquote><h2 id="read-write"><a href="#read-write" class="headerlink" title="read-write"></a>read-write</h2><blockquote><p>匹配用户可更改的元素。</p></blockquote><h2 id="required"><a href="#required" class="headerlink" title="required"></a>required</h2><blockquote><p>匹配必填的form元素。</p></blockquote><p>注意：<code>:optional</code>伪类选中’可选的’表单字段。</p><h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><blockquote><p>这个 CSS 伪类匹配文档树的根元素。对于 <code>HTML</code> 来说，<code>:root</code> 表示 <code>&lt;html&gt;</code> 元素，除了优先级更高之外，与 <code>html</code> 选择器相同。</p></blockquote><p>在声明全局 CSS 变量时 <code>:root</code> 会很有用：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attribute">--main-color</span>: hotpink;<br>  <span class="hljs-attribute">--pane-padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">42px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h1><p>伪元素开头为双冒号::</p><blockquote><p>::pseudo-element-name</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">article</span> <span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span> &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">120%</span>;<br>    <span class="hljs-attribute">font-weight</span>: bold;<br>&#125;  <br></code></pre></div></td></tr></table></figure><ul><li><a href="#after">::after</a></li><li><a href="#before">::before</a></li><li><a href="#first-letter">::first-letter</a></li><li><a href="#first-line">::first-line</a></li><li><a href="#selection">::selection</a></li></ul><h2 id="after"><a href="#after" class="headerlink" title="after"></a>after</h2><blockquote><p><code>::after</code>用来创建一个伪元素，作为已选中元素的最后一个子元素。通常会配合<code>content</code>属性来为该元素添加装饰内容。这个虚拟元素默认是行内元素。</p></blockquote><p>当然，通过这个伪元素添加的任何内容都无法通过其他选择符选中。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Ricardo<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;, Web Designer!&quot;</span>;<br>    <span class="hljs-attribute">color</span>: green;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下：</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">Ricardo, Web Designer!<br></code></pre></div></td></tr></table></figure><ul><li>提示用法</li></ul><p>接下来的示例展示了用<code>::after</code>伪元素，<code>attr()</code>CSS表达式和一个自定义数据属性 <code>data-descr</code> 创建一个纯CSS, 词汇表提示工具。在<a href="https://media.prod.mdn.mozit.cloud/attachments/2013/01/20/4591/c9173e2c17cea118775c05f12eef4c1f/css-only_tooltips.html">单独页面</a>看这个例子。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>这是上面代码的实现<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  我们有一些 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-descr</span>=<span class="hljs-string">&quot;collection of words and punctuation&quot;</span>&gt;</span>文字<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 有一些<br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-descr</span>=<span class="hljs-string">&quot;small popups which also hide again&quot;</span>&gt;</span>提示<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>。<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>  把鼠标放上去<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">data-descr</span>=<span class="hljs-string">&quot;not to be taken literally&quot;</span>&gt;</span>看看<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>.<br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[data-descr]</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>  <span class="hljs-attribute">text-decoration</span>: underline;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#00F</span>;<br>  <span class="hljs-attribute">cursor</span>: help;<br>&#125;<br><br><span class="hljs-selector-tag">span</span><span class="hljs-selector-attr">[data-descr]</span><span class="hljs-selector-pseudo">:hover</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-built_in">attr</span>(data-descr);<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">min-width</span>: <span class="hljs-number">200px</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> <span class="hljs-number">#aaaaaa</span> solid;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ffffcc</span>;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_16-40-49.png"></p><h2 id="before"><a href="#before" class="headerlink" title="before"></a>before</h2><blockquote><p><code>::before</code> 创建一个伪元素，其将成为匹配选中的元素的第一个子元素。常通过 <code>content</code> 属性来为一个元素添加修饰性的内容。此元素默认为行内元素。</p></blockquote><p>我们可以用几乎任何方法定义 <code>content</code> 中的文字和图片样式。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ribbon&quot;</span>&gt;</span>Notice where the orange box is.<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.ribbon</span> &#123;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#5BC8F7</span>;<br>&#125;<br><br><span class="hljs-selector-class">.ribbon</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>   <span class="hljs-attribute">content</span>:          <span class="hljs-string">&quot;Look at this orange box.&quot;</span>;<br>   <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFBA10</span>;<br>   <span class="hljs-attribute">border-color</span>:     black;<br>   <span class="hljs-attribute">border-style</span>:     dotted;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_16-44-33.png"></p><h2 id="first-letter"><a href="#first-letter" class="headerlink" title="first-letter"></a>first-letter</h2><blockquote><p><code>:first-letter</code>伪元素选择一行文本第一个字符。</p></blockquote><p>如果相应行前面包含图片、视频或表格元素，那么不会影响选择第一个字符。</p><p>这个伪元素非常适合对段落进行排版，有了它就不必用图片或其他技巧了。</p><p>提示： 这个伪元素也可以选中<code>:before</code>伪元素生成的第一个字符。</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">:first-letter</span>  &#123;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">5em</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="first-line"><a href="#first-line" class="headerlink" title="first-line"></a>first-line</h2><blockquote><p><code>:first-line</code>选择元素的第一行，只适用于块级元素，行内元素不适用。</p></blockquote><p>即使一段文本有多行，也会选中第一行。</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipisicing elit,<br>sed do eiusmod tempor incididunt ut labore.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">p</span><span class="hljs-selector-pseudo">::first-line</span> &#123; <span class="hljs-attribute">text-transform</span>: uppercase &#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-29_16-49-19.png"></p><h2 id="selection"><a href="#selection" class="headerlink" title="selection"></a>selection</h2><blockquote><p>CSS伪元素应用于文档中被用户高亮的部分（比如使用鼠标或其他选择设备选中的部分）。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-pseudo">::selection</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: cyan;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>只有一小部分CSS属性可以用于<code>::selection</code> 选择器：</p><ul><li><code>color</code></li><li><code>background-color</code></li><li><code>cursor</code></li><li><code>caret-color</code></li><li><code>outline and its longhands</code></li><li><code>text-decoration and its associated properties</code></li><li><code>text-emphasis-color</code></li><li><code>text-shadow</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10分钟搞定正则表达式</title>
    <link href="/2020/12/28/10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/12/28/10%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者： 我与我周旋久<br><a href="https://segmentfault.com/a/1190000038502198">https://segmentfault.com/a/1190000038502198</a></p></blockquote><h1 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h1><ol><li><code>?</code>: 它前面的字符需要出现0次或1次</li></ol><blockquote><p>例如：<code>used?</code>可以匹配到<code>use</code>和<code>used</code></p></blockquote><ol start="2"><li><code>*</code>: 它会匹配0个或多个字符</li></ol><blockquote><p>例如：<code>ab*c</code>可以匹配到<code>ac</code>,<code>abc</code>,<code>abbbbbbc</code></p></blockquote><ol start="3"><li><code>+</code>: 它会匹配一次及以上的字符</li></ol><p>例如：<code>ab+c</code>可以匹配<code>abc</code>,<code>abbbc</code>,而不会匹配<code>ac</code></p><ol start="4"><li><code>&#123;&#125;</code>: 可以限定匹配的数量</li></ol><blockquote><p>例如：<code>ab&#123;6&#125;c</code>,则匹配到<code>abbbbbbc</code>,而要限定b的数量在2到6之间，则是<code>ab&#123;2,6&#125;c</code>，如果只是两次以上，则省略括号里的6，写成<code>ab&#123;2,&#125;c</code></p></blockquote><h1 id="“或”运算符"><a href="#“或”运算符" class="headerlink" title="“或”运算符"></a>“或”运算符</h1><p>例如：<code>a (cat|dog)</code>匹配的是<code>a cat</code>和<code>a dog</code></p><h1 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h1><p><code>[]</code>:表示里面的内容只能取自于它们</p><blockquote><p>例如：<code>[a-z]</code>表示所有小写的英文字母，<code>[abc]</code>能匹配到<code>abc</code>,<code>aabbcc</code>,<code>abcc</code>,<code>[a-zA-Z]</code>表示所有的英文字母，如果在<code>[]</code>前加上<code>^</code>,表示<code>[]</code>之外的字符</p></blockquote><h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><ul><li><code>\d</code>: 数字字符，等同于<code>[0-9]</code></li><li><code>\w</code>: 单词字符</li><li><code>\s</code>: 空白符，包含Tab和换行符</li><li><code>\D</code>: 非数字字符</li><li><code>\W</code>: 非单词字符</li><li><code>\S</code>: 非空白符</li><li><code>.</code>: 代表任意字符，不包含换行符</li><li><code>^</code>: 匹配行首</li></ul><blockquote><p>例如：<code>^a</code>匹配<code>abv</code>,<code>acccn</code></p></blockquote><ul><li><code>$</code>: 匹配行尾</li></ul><blockquote><p>例如：<code>a$</code>匹配<code>tea</code>,<code>cba</code></p></blockquote><h1 id="贪婪与懒惰匹配"><a href="#贪婪与懒惰匹配" class="headerlink" title="贪婪与懒惰匹配"></a>贪婪与懒惰匹配</h1><blockquote><p>贪婪匹配：正则表达式通常的行为是匹配尽可能多的字符，比如这个表达式：<code>a.*b</code>，它将会匹配最长的以<code>a</code>开始，以<code>b</code>结束的字符串，如果用它来搜索<code>aabab</code>的话，它会匹配整个字符串<code>aabab</code></p></blockquote><blockquote><p>懒惰匹配：就是匹配尽可能少的字符，在能使整个匹配成功的前提下使用最少的重复，只要在它后面加上一个问号?即可，例如<code>a.*?b</code>匹配最短的，以<code>a</code>开始，以<code>b</code>结束的字符串，如果把它应用于<code>aabab</code>的话，它会匹配<code>aab</code>和<code>ab</code>，为什么第一个匹配是<code>aab</code>（第一到第三个字符）而不是<code>ab</code>（第二到第三个字符）？简单地说，因为正则表达式有一条比懒惰／贪婪规则优先级更高的规则，就是：最先开始的匹配拥有最高的优先权</p></blockquote><h1 id="常用的正则表达式大全"><a href="#常用的正则表达式大全" class="headerlink" title="常用的正则表达式大全"></a>常用的正则表达式大全</h1><ol><li>数字：<code>^[0-9]*$</code></li><li>n位的数字：<code>^\d&#123;n&#125;$</code></li><li>至少n位的数字：<code>^\d&#123;n,&#125;$</code></li><li>m-n位的数字：<code>^\d&#123;m,n&#125;$</code></li><li>零和非零开头的数字：<code>^(0|[1-9][0-9]*)$</code></li><li>非零开头的最多带两位小数的数字：<code>^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$</code></li><li>带1-2位小数的正数或负数：<code>^(\-)?\d+(\.\d&#123;1,2&#125;)?$</code></li><li>正数、负数、和小数：<code>^(\-|\+)?\d+(\.\d+)?$</code></li><li>有两位小数的正实数：<code>^[0-9]+(.[0-9]&#123;2&#125;)?$</code></li><li>有1~3位小数的正实数：<code>^[0-9]+(.[0-9]&#123;1,3&#125;)?$</code></li><li>非零的正整数：<code>^[1-9]\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$</code> 或 <code>^\+?[1-9][0-9]*$</code></li><li>非零的负整数：<code>^\-[1-9][]0-9&quot;*$</code> 或 <code>^-[1-9]\d*$</code></li><li>非负整数：<code>^\d+$</code> 或 <code>^[1-9]\d*|0$</code></li><li>非正整数：<code>^-[1-9]\d*|0$</code> 或 <code>^((-\d+)|(0+))$</code></li><li>非负浮点数：<code>^\d+(\.\d+)?$</code> 或 <code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0$</code></li><li>非正浮点数：<code>^((-\d+(\.\d+)?)|(0+(\.0+)?))$</code> 或 <code>^(-([1-9]\d*\.\d*|0\.\d*[1-9]\d*))|0?\.0+|0$</code></li><li>正浮点数：<code>^[1-9]\d*\.\d*|0\.\d*[1-9]\d*$</code> 或 <code>^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$</code></li><li>负浮点数：<code>^-([1-9]\d*\.\d*|0\.\d*[1-9]\d*)$</code> 或 <code>^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$</code></li><li>浮点数：<code>^(-?\d+)(\.\d+)?$</code> 或 <code>^-?([1-9]\d*\.\d*|0\.\d*[1-9]\d*|0?\.0+|0)$</code></li></ol><hr><ol><li>汉字：<code>^[\u4e00-\u9fa5]&#123;0,&#125;$</code></li><li>英文和数字：<code>^[A-Za-z0-9]+$</code> 或 <code>^[A-Za-z0-9]&#123;4,40&#125;$</code></li><li>长度为3-20的所有字符：<code>^.&#123;3,20&#125;$</code></li><li>由26个英文字母组成的字符串：<code>^[A-Za-z]+$</code></li><li>由26个大写英文字母组成的字符串：<code>^[A-Z]+$</code></li><li>由26个小写英文字母组成的字符串：<code>^[a-z]+$</code></li><li>由数字和26个英文字母组成的字符串：<code>^[A-Za-z0-9]+$</code></li><li>由数字、26个英文字母或者下划线组成的字符串：<code>^\w+$ 或 ^\w&#123;3,20&#125;$</code></li><li>中文、英文、数字包括下划线：<code>^[\u4E00-\u9FA5A-Za-z0-9_]+$</code></li><li>中文、英文、数字但不包括下划线等符号：<code>^[\u4E00-\u9FA5A-Za-z0-9]+$</code> 或 <code>^[\u4E00-\u9FA5A-Za-z0-9]&#123;2,20&#125;$</code></li></ol><hr><ol><li>Email地址：<code>^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$</code></li><li>域名：<code>[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</code></li><li>InternetURL：<code>[a-zA-z]+://[^\s]*</code> 或 <code>^http://([\w-]+\.)+[\w-]+(/[\w-./?%&amp;=]*)?$</code></li><li>手机号码：<code>^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</code></li><li>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：<code>^(\(\d&#123;3,4&#125;-)|\d&#123;3.4&#125;-)?\d&#123;7,8&#125;$</code></li><li>国内电话号码(0511-4405222、021-87888822)：<code>\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;</code></li><li>身份证号(15位、18位数字)：<code>^\d&#123;15&#125;|\d&#123;18&#125;$</code></li><li>短身份证号码(数字、字母x结尾)：<code>^([0-9])&#123;7,18&#125;(x|X)?$</code> 或 <code>^\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$</code></li><li>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：<code>^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$</code></li><li>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：<code>^[a-zA-Z]\w&#123;5,17&#125;$</code></li><li>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：<code>^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$</code></li><li>日期格式：<code>^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</code></li><li>一年的12个月(01～09和1～12)：<code>^(0?[1-9]|1[0-2])$</code></li><li>一个月的31天(01～09和1～31)：<code>^((0?[1-9])|((1|2)[0-9])|30|31)$</code></li><li>xml文件：<code>^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\.[x|X][m|M][l|L]$</code></li><li>中文字符的正则表达式：<code>[\u4e00-\u9fa5]</code></li><li>双字节字符：<code>[^\x00-\xff]</code> (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</li><li>空白行的正则表达式：<code>\n\s*\r</code> (可以用来删除空白行)</li><li>首尾空白字符的正则表达式：<code>^\s*|\s*$或(^\s*)|(\s*$)</code> (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</li><li>腾讯QQ号：<code>[1-9][0-9]&#123;4,&#125;</code> (腾讯QQ号从10000开始)</li><li>中国邮政编码：<code>[1-9]\d&#123;5&#125;(?!\d)</code> (中国邮政编码为6位数字)</li><li>IP地址：<code>\d+\.\d+\.\d+\.\d+</code> (提取IP地址时有用)</li><li>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li><li>IP-v4地址：<code>\\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\b </code>(提取IP地址时有用)</li><li>子网掩码：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></li><li>校验日期: <code>^(?:(?!0000)[0-9]&#123;4&#125;-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]&#123;2&#125;(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)</code></li><li>抽取注释：<code>&lt;!--(.*?)--&gt;</code></li></ol><p>补充说明一下，最后这个正则表达式<code>&lt;!--(.*?)--&gt;</code>是可以把匹配到的数据提取出来，用个括号把需要的提取的数据括起来，非常的有用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>正则</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8个非常实用的Vue自定义指令</title>
    <link href="/2020/12/28/8%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%AE%9E%E7%94%A8%E7%9A%84Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/"/>
    <url>/2020/12/28/8%E4%B8%AA%E9%9D%9E%E5%B8%B8%E5%AE%9E%E7%94%A8%E7%9A%84Vue%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>作者： lzg9527<br><a href="https://segmentfault.com/a/1190000038475001">https://segmentfault.com/a/1190000038475001</a></p></blockquote><p><a href="https://github.com/Michael-lzg/v-directives">demo源码地址</a></p><p>在 Vue，除了核心功能默认内置的指令 ( v-model 和 v-show )，Vue 也允许注册自定义指令。它的作用价值在于当开发人员在某些场景下需要对普通 DOM 元素进行操作。</p><p>Vue 自定义指令有全局注册和局部注册两种方式。先来看看注册全局指令的方式，通过 <code>Vue.directive( id, [definition] )</code> 方式注册全局指令。然后在入口文件中进行 <code>Vue.use()</code> 调用。</p><p>批量注册指令，新建 <code>directives/index.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> copy <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./copy&#x27;</span><br><span class="hljs-keyword">import</span> longpress <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./longpress&#x27;</span><br><span class="hljs-comment">// 自定义指令</span><br><span class="hljs-keyword">const</span> directives = &#123;<br>  copy,<br>  longpress,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-function"><span class="hljs-title">install</span>(<span class="hljs-params">Vue</span>)</span> &#123;<br>    <span class="hljs-built_in">Object</span>.keys(directives).forEach(<span class="hljs-function">(<span class="hljs-params">key</span>) =&gt;</span> &#123;<br>      Vue.directive(key, directives[key])<br>    &#125;)<br>  &#125;,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在 <code>main.js</code> 引入并调用</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> Directives <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./JS/directives&#x27;</span><br>Vue.use(Directives)<br></code></pre></div></td></tr></table></figure><p>指令定义函数提供了几个钩子函数（可选）：</p><ul><li><code>bind</code>: 只调用一次，指令第一次绑定到元素时调用，可以定义一个在绑定时执行一次的初始化动作。</li><li><code>inserted</code>: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li><li><code>update</code>: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值。</li><li><code>componentUpdated</code>: 被绑定元素所在模板完成一次更新周期时调用。</li><li><code>unbind</code>: 只调用一次， 指令与元素解绑时调用。</li></ul><p>下面分享几个实用的 Vue 自定义指令</p><ul><li>复制粘贴指令 <code>v-copy</code></li><li>长按指令 <code>v-longpress</code></li><li>输入框防抖指令 <code>v-debounce</code></li><li>禁止表情及特殊字符 <code>v-emoji</code></li><li>图片懒加载 <code>v-LazyLoad</code></li><li>权限校验指令 <code>v-premission</code></li><li>实现页面水印 <code>v-waterMarker</code></li><li>拖拽指令 <code>v-draggable</code></li></ul><h1 id="v-copy"><a href="#v-copy" class="headerlink" title="v-copy"></a>v-copy</h1><p>需求：实现一键复制文本内容，用于鼠标右键粘贴。</p><p>思路：</p><ol><li>动态创建 textarea 标签，并设置 readOnly 属性及移出可视区域</li><li>将要复制的值赋给 textarea 标签的 value 属性，并插入到 body</li><li>选中值 textarea 并复制</li><li>将 body 中插入的 textarea 移除</li><li>在第一次调用时绑定事件，在解绑时移除事件</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> copy = &#123;<br>  <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, &#123; value &#125;</span>)</span> &#123;<br>    el.$value = value<br>    el.handler = <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (!el.$value) &#123;<br>        <span class="hljs-comment">// 值为空的时候，给出提示。可根据项目UI仔细设计</span><br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;无复制内容&#x27;</span>)<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">// 动态创建 textarea 标签</span><br>      <span class="hljs-keyword">const</span> textarea = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;textarea&#x27;</span>)<br>      <span class="hljs-comment">// 将该 textarea 设为 readonly 防止 iOS 下自动唤起键盘，同时将 textarea 移出可视区域</span><br>      textarea.readOnly = <span class="hljs-string">&#x27;readonly&#x27;</span><br>      textarea.style.position = <span class="hljs-string">&#x27;absolute&#x27;</span><br>      textarea.style.left = <span class="hljs-string">&#x27;-9999px&#x27;</span><br>      <span class="hljs-comment">// 将要 copy 的值赋给 textarea 标签的 value 属性</span><br>      textarea.value = el.$value<br>      <span class="hljs-comment">// 将 textarea 插入到 body 中</span><br>      <span class="hljs-built_in">document</span>.body.appendChild(textarea)<br>      <span class="hljs-comment">// 选中值并复制</span><br>      textarea.select()<br>      <br>      <span class="hljs-keyword">const</span> result = <span class="hljs-built_in">document</span>.execCommand(<span class="hljs-string">&#x27;Copy&#x27;</span>)<br>      <span class="hljs-keyword">if</span> (result) &#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;复制成功&#x27;</span>) <span class="hljs-comment">// 可根据项目UI仔细设计</span><br>      &#125;<br>      <span class="hljs-built_in">document</span>.body.removeChild(textarea)<br>    &#125;<br>    <span class="hljs-comment">// 绑定点击事件，就是所谓的一键 copy 啦</span><br>    el.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, el.handler)<br>  &#125;,<br>  <span class="hljs-comment">// 当传进来的值更新的时候触发</span><br>  <span class="hljs-function"><span class="hljs-title">componentUpdated</span>(<span class="hljs-params">el, &#123; value &#125;</span>)</span> &#123;<br>    el.$value = value<br>  &#125;,<br>  <span class="hljs-comment">// 指令与元素解绑的时候，移除事件绑定</span><br>  <span class="hljs-function"><span class="hljs-title">unbind</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    el.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, el.handler)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> copy<br></code></pre></div></td></tr></table></figure><p>使用：给 Dom 加上 <code>v-copy</code> 及复制的文本即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;button v-copy=<span class="hljs-string">&quot;copyText&quot;</span>&gt;复制&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt; <br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;<br>      <span class="hljs-keyword">return</span> &#123;<br>        copyText: <span class="hljs-string">&#x27;a copy directives&#x27;</span>,<br>      &#125;<br>    &#125;,<br>  &#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h1 id="v-longpress"><a href="#v-longpress" class="headerlink" title="v-longpress"></a>v-longpress</h1><p>需求：实现长按，用户需要按下并按住按钮几秒钟，触发相应的事件</p><p>思路：</p><ol><li>创建一个计时器， 2 秒后执行函数</li><li>当用户按下按钮时触发 <code>mousedown</code> 事件，启动计时器；用户松开按钮时调用 <code>mouseout</code> 事件。</li><li>如果 <code>mouseup</code> 事件 2 秒内被触发，就清除计时器，当作一个普通的点击事件</li><li>如果计时器没有在 2 秒内清除，则判定为一次长按，可以执行关联的函数。</li><li>在移动端要考虑 <code>touchstart</code>，<code>touchend</code> 事件</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> longpress = &#123;<br>  bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vNode</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> binding.value !== <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-keyword">throw</span> <span class="hljs-string">&#x27;callback must be a function&#x27;</span><br>    &#125;<br>    <span class="hljs-comment">// 定义变量</span><br>    <span class="hljs-keyword">let</span> pressTimer = <span class="hljs-literal">null</span><br>    <span class="hljs-comment">// 创建计时器（ 2秒后执行函数 ）</span><br>    <span class="hljs-keyword">let</span> start = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (e.type === <span class="hljs-string">&#x27;click&#x27;</span> &amp;&amp; e.button !== <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-keyword">if</span> (pressTimer === <span class="hljs-literal">null</span>) &#123;<br>        pressTimer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>          handler()<br>        &#125;, <span class="hljs-number">2000</span>)<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 取消计时器</span><br>    <span class="hljs-keyword">let</span> cancel = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (pressTimer !== <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(pressTimer)<br>        pressTimer = <span class="hljs-literal">null</span><br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">// 运行函数</span><br>    <span class="hljs-keyword">const</span> handler = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>      binding.value(e)<br>    &#125;<br>    <span class="hljs-comment">// 添加事件监听器</span><br>    el.addEventListener(<span class="hljs-string">&#x27;mousedown&#x27;</span>, start)<br>    el.addEventListener(<span class="hljs-string">&#x27;touchstart&#x27;</span>, start)<br>    <span class="hljs-comment">// 取消计时器</span><br>    el.addEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, cancel)<br>    el.addEventListener(<span class="hljs-string">&#x27;mouseout&#x27;</span>, cancel)<br>    el.addEventListener(<span class="hljs-string">&#x27;touchend&#x27;</span>, cancel)<br>    el.addEventListener(<span class="hljs-string">&#x27;touchcancel&#x27;</span>, cancel)<br>  &#125;,<br>  <span class="hljs-comment">// 当传进来的值更新的时候触发</span><br>  <span class="hljs-function"><span class="hljs-title">componentUpdated</span>(<span class="hljs-params">el, &#123; value &#125;</span>)</span> &#123;<br>    el.$value = value<br>  &#125;,<br>  <span class="hljs-comment">// 指令与元素解绑的时候，移除事件绑定</span><br>  <span class="hljs-function"><span class="hljs-title">unbind</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    el.removeEventListener(<span class="hljs-string">&#x27;click&#x27;</span>, el.handler)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> longpress<br></code></pre></div></td></tr></table></figure><p>使用：给 Dom 加上 <code>v-longpress</code> 及回调函数即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;button v-longpress=<span class="hljs-string">&quot;longpress&quot;</span>&gt;长按&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  methods: &#123;<br>  longpress () &#123;<br>  alert(<span class="hljs-string">&#x27;长按指令生效&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h1 id="v-debounce"><a href="#v-debounce" class="headerlink" title="v-debounce"></a>v-debounce</h1><p>背景：在开发中，有些提交保存按钮有时候会在短时间内被点击多次，这样就会多次重复请求后端接口，造成数据的混乱，比如新增表单的提交按钮，多次点击就会新增多条重复的数据。</p><p>需求：防止按钮在短时间内被多次点击，使用防抖函数限制规定时间内只能点击一次。</p><p>思路：</p><ol><li>定义一个延迟执行的方法，如果在延迟时间内再调用该方法，则重新计算执行时间。</li><li>将时间绑定在 click 方法上。</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> debounce = &#123;<br>  inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> timer<br>    el.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      <span class="hljs-keyword">if</span> (timer) &#123;<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>      &#125;<br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        binding.value()<br>      &#125;, <span class="hljs-number">1000</span>)<br>    &#125;)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> debounce<br></code></pre></div></td></tr></table></figure><p>使用：给 Dom 加上 <code>v-debounce</code> 及回调函数即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;button v-debounce=<span class="hljs-string">&quot;debounceClick&quot;</span>&gt;防抖&lt;/button&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt; <br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  methods: &#123;<br>    debounceClick () &#123;<br>      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;只触发一次&#x27;</span>)<br>    &#125;<br>  &#125;<br>&#125; <br>&lt;/script&gt;<br></code></pre></div></td></tr></table></figure><h1 id="v-emoji"><a href="#v-emoji" class="headerlink" title="v-emoji"></a>v-emoji</h1><p>背景：开发中遇到的表单输入，往往会有对输入内容的限制，比如不能输入表情和特殊字符，只能输入数字或字母等。</p><p>需求：根据正则表达式，设计自定义处理表单输入规则的指令，下面以禁止输入表情和特殊字符为例。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">let</span> findEle = <span class="hljs-function">(<span class="hljs-params">parent, type</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> parent.tagName.toLowerCase() === type ? parent : parent.querySelector(type)<br>&#125;<br><br><span class="hljs-keyword">const</span> trigger = <span class="hljs-function">(<span class="hljs-params">el, type</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> e = <span class="hljs-built_in">document</span>.createEvent(<span class="hljs-string">&#x27;HTMLEvents&#x27;</span>)<br>  e.initEvent(type, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>)<br>  el.dispatchEvent(e)<br>&#125;<br><br><span class="hljs-keyword">const</span> emoji = &#123;<br>  bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding, vnode</span>) </span>&#123;<br>    <span class="hljs-comment">// 正则规则可根据需求自定义</span><br>    <span class="hljs-keyword">var</span> regRule = <span class="hljs-regexp">/[^u4E00-u9FA5|d|a-zA-Z|rns,.?!，。？！…—&amp;$=()-+/*&#123;&#125;[]]|s/g</span><br>    <span class="hljs-keyword">let</span> $inp = findEle(el, <span class="hljs-string">&#x27;input&#x27;</span>)<br>    el.$inp = $inp<br>    $inp.handle = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> val = $inp.value<br>      $inp.value = val.replace(regRule, <span class="hljs-string">&#x27;&#x27;</span>)<br><br>      trigger($inp, <span class="hljs-string">&#x27;input&#x27;</span>)<br>    &#125;<br>    $inp.addEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, $inp.handle)<br>  &#125;,<br>  unbind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    el.$inp.removeEventListener(<span class="hljs-string">&#x27;keyup&#x27;</span>, el.$inp.handle)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> emoji<br></code></pre></div></td></tr></table></figure><p>使用：将需要校验的输入框加上 <code>v-emoji</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;input type=<span class="hljs-string">&quot;text&quot;</span> v-model=<span class="hljs-string">&quot;note&quot;</span> v-emoji /&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><h1 id="v-LazyLoad"><a href="#v-LazyLoad" class="headerlink" title="v-LazyLoad"></a>v-LazyLoad</h1><p>背景：在类电商类项目，往往存在大量的图片，如 banner 广告图，菜单导航图，美团等商家列表头图等。图片众多以及图片体积过大往往会影响页面加载速度，造成不良的用户体验，所以进行图片懒加载优化势在必行。</p><p>需求：实现一个图片懒加载指令，只加载浏览器可见区域的图片。</p><p>思路：</p><ol><li>图片懒加载的原理主要是判断当前图片是否到了可视区域这一核心逻辑实现的</li><li>拿到所有的图片 Dom ，遍历每个图片判断当前图片是否到了可视区范围内</li><li>如果到了就设置图片的 <code>src</code> 属性，否则显示默认图片</li></ol><p>图片懒加载有两种方式可以实现，一是绑定 <code>srcoll</code> 事件进行监听，二是使用 <code>IntersectionObserver</code> 判断图片是否到了可视区域，但是有浏览器兼容性问题。</p><p>下面封装一个懒加载指令兼容两种方法，判断浏览器是否支持 <code>IntersectionObserver</code> API，如果支持就使用 <code>IntersectionObserver</code> 实现懒加载，否则则使用 <code>srcoll</code> 事件监听 + 节流的方法实现。</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> LazyLoad = &#123;<br>  <span class="hljs-comment">// install方法</span><br>  <span class="hljs-function"><span class="hljs-title">install</span>(<span class="hljs-params">Vue, options</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> defaultSrc = options.default<br>    Vue.directive(<span class="hljs-string">&#x27;lazy&#x27;</span>, &#123;<br>      <span class="hljs-function"><span class="hljs-title">bind</span>(<span class="hljs-params">el, binding</span>)</span> &#123;<br>        LazyLoad.init(el, binding.value, defaultSrc)<br>      &#125;,<br>      <span class="hljs-function"><span class="hljs-title">inserted</span>(<span class="hljs-params">el</span>)</span> &#123;<br>        <span class="hljs-keyword">if</span> (IntersectionObserver) &#123;<br>          LazyLoad.observe(el)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          LazyLoad.listenerScroll(el)<br>        &#125;<br>      &#125;,<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 初始化</span><br>  <span class="hljs-function"><span class="hljs-title">init</span>(<span class="hljs-params">el, val, def</span>)</span> &#123;<br>    el.setAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>, val)<br>    el.setAttribute(<span class="hljs-string">&#x27;src&#x27;</span>, def)<br>  &#125;,<br>  <span class="hljs-comment">// 利用IntersectionObserver监听el</span><br>  <span class="hljs-function"><span class="hljs-title">observe</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">var</span> io = <span class="hljs-keyword">new</span> IntersectionObserver(<span class="hljs-function">(<span class="hljs-params">entries</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> realSrc = el.dataset.src<br>      <span class="hljs-keyword">if</span> (entries[<span class="hljs-number">0</span>].isIntersecting) &#123;<br>        <span class="hljs-keyword">if</span> (realSrc) &#123;<br>          el.src = realSrc<br>          el.removeAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>        &#125;<br>      &#125;<br>    &#125;)<br>    io.observe(el)<br>  &#125;,<br>  <span class="hljs-comment">// 监听scroll事件</span><br>  <span class="hljs-function"><span class="hljs-title">listenerScroll</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> handler = LazyLoad.throttle(LazyLoad.load, <span class="hljs-number">300</span>)<br>    LazyLoad.load(el)<br>    <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;scroll&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>      handler(el)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">// 加载真实图片</span><br>  <span class="hljs-function"><span class="hljs-title">load</span>(<span class="hljs-params">el</span>)</span> &#123;<br>    <span class="hljs-keyword">const</span> windowHeight = <span class="hljs-built_in">document</span>.documentElement.clientHeight<br>    <span class="hljs-keyword">const</span> elTop = el.getBoundingClientRect().top<br>    <span class="hljs-keyword">const</span> elBtm = el.getBoundingClientRect().bottom<br>    <span class="hljs-keyword">const</span> realSrc = el.dataset.src<br>    <span class="hljs-keyword">if</span> (elTop - windowHeight &lt; <span class="hljs-number">0</span> &amp;&amp; elBtm &gt; <span class="hljs-number">0</span>) &#123;<br>      <span class="hljs-keyword">if</span> (realSrc) &#123;<br>        el.src = realSrc<br>        el.removeAttribute(<span class="hljs-string">&#x27;data-src&#x27;</span>)<br>      &#125;<br>    &#125;<br>  &#125;,<br>  <span class="hljs-comment">// 节流</span><br>  <span class="hljs-function"><span class="hljs-title">throttle</span>(<span class="hljs-params">fn, delay</span>)</span> &#123;<br>    <span class="hljs-keyword">let</span> timer<br>    <span class="hljs-keyword">let</span> prevTime<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;<br>      <span class="hljs-keyword">const</span> currTime = <span class="hljs-built_in">Date</span>.now()<br>      <span class="hljs-keyword">const</span> context = <span class="hljs-built_in">this</span><br>      <span class="hljs-keyword">if</span> (!prevTime) prevTime = currTime<br>      <span class="hljs-built_in">clearTimeout</span>(timer)<br><br>      <span class="hljs-keyword">if</span> (currTime - prevTime &gt; delay) &#123;<br>        prevTime = currTime<br>        fn.apply(context, args)<br>        <span class="hljs-built_in">clearTimeout</span>(timer)<br>        <span class="hljs-keyword">return</span><br>      &#125;<br><br>      timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        prevTime = <span class="hljs-built_in">Date</span>.now()<br>        timer = <span class="hljs-literal">null</span><br>        fn.apply(context, args)<br>      &#125;, delay)<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> LazyLoad<br></code></pre></div></td></tr></table></figure><p>使用，将组件内 标签的 src 换成 <code>v-LazyLoad</code></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;img v-LazyLoad=<span class="hljs-string">&quot;xxx.jpg&quot;</span> /&gt;<br></code></pre></div></td></tr></table></figure><h1 id="v-permission"><a href="#v-permission" class="headerlink" title="v-permission"></a>v-permission</h1><p>背景：在一些后台管理系统，我们可能需要根据用户角色进行一些操作权限的判断，很多时候我们都是粗暴地给一个元素添加 <code>v-if / v-show</code> 来进行显示隐藏，但如果判断条件繁琐且多个地方需要判断，这种方式的代码不仅不优雅而且冗余。针对这种情况，我们可以通过全局自定义指令来处理。</p><p>需求：自定义一个权限指令，对需要权限判断的 Dom 进行显示隐藏。</p><p>思路：</p><ol><li>自定义一个权限数组</li><li>判断用户的权限是否在这个数组内，如果是则显示，否则则移除 Dom</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkArray</span>(<span class="hljs-params">key</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arr = [<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>]<br>  <span class="hljs-keyword">let</span> index = arr.indexOf(key)<br>  <span class="hljs-keyword">if</span> (index &gt; -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span> <span class="hljs-comment">// 有权限</span><br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> <span class="hljs-comment">// 无权限</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> permission = &#123;<br>  inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>    <span class="hljs-keyword">let</span> permission = binding.value <span class="hljs-comment">// 获取到 v-permission的值</span><br>    <span class="hljs-keyword">if</span> (permission) &#123;<br>      <span class="hljs-keyword">let</span> hasPermission = checkArray(permission)<br>      <span class="hljs-keyword">if</span> (!hasPermission) &#123;<br>        <span class="hljs-comment">// 没有权限 移除Dom元素</span><br>        el.parentNode &amp;&amp; el.parentNode.removeChild(el)<br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> permission<br></code></pre></div></td></tr></table></figure><p>使用：给 <code>v-permission</code> 赋值判断即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;btns&quot;</span>&gt;<br>  &lt;!-- 显示 --&gt;<br>  &lt;button v-permission=<span class="hljs-string">&quot;&#x27;1&#x27;&quot;</span>&gt;权限按钮<span class="hljs-number">1</span>&lt;/button&gt;<br>  &lt;!-- 不显示 --&gt;<br>  &lt;button v-permission=<span class="hljs-string">&quot;&#x27;10&#x27;&quot;</span>&gt;权限按钮<span class="hljs-number">2</span>&lt;/button&gt;<br>&lt;/div&gt;<br></code></pre></div></td></tr></table></figure><h1 id="vue-waterMarker"><a href="#vue-waterMarker" class="headerlink" title="vue-waterMarker"></a>vue-waterMarker</h1><p>需求：给整个页面添加背景水印</p><p>思路：</p><ol><li>使用 <code>canvas</code> 特性生成 <code>base64</code> 格式的图片文件，设置其字体大小，颜色等。</li><li>将其设置为背景图片，从而实现页面或组件水印效果</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addWaterMarker</span>(<span class="hljs-params">str, parentNode, font, textColor</span>) </span>&#123;<br>  <span class="hljs-comment">// 水印文字，父元素，字体，文字颜色</span><br>  <span class="hljs-keyword">var</span> can = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br>  parentNode.appendChild(can)<br>  can.width = <span class="hljs-number">200</span><br>  can.height = <span class="hljs-number">150</span><br>  can.style.display = <span class="hljs-string">&#x27;none&#x27;</span><br>  <span class="hljs-keyword">var</span> cans = can.getContext(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>  cans.rotate((-<span class="hljs-number">20</span> * <span class="hljs-built_in">Math</span>.PI) / <span class="hljs-number">180</span>)<br>  cans.font = font || <span class="hljs-string">&#x27;16px Microsoft JhengHei&#x27;</span><br>  cans.fillStyle = textColor || <span class="hljs-string">&#x27;rgba(180, 180, 180, 0.3)&#x27;</span><br>  cans.textAlign = <span class="hljs-string">&#x27;left&#x27;</span><br>  cans.textBaseline = <span class="hljs-string">&#x27;Middle&#x27;</span><br>  cans.fillText(str, can.width / <span class="hljs-number">10</span>, can.height / <span class="hljs-number">2</span>)<br>  parentNode.style.backgroundImage = <span class="hljs-string">&#x27;url(&#x27;</span> + can.toDataURL(<span class="hljs-string">&#x27;image/png&#x27;</span>) + <span class="hljs-string">&#x27;)&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">const</span> waterMarker = &#123;<br>  bind: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el, binding</span>) </span>&#123;<br>    addWaterMarker(binding.value.text, el, binding.value.font, binding.value.textColor)<br>  &#125;,<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> waterMarker<br></code></pre></div></td></tr></table></figure><p>使用，设置水印文案，颜色，字体大小即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div v-waterMarker=<span class="hljs-string">&quot;&#123;text:&#x27;lzg版权所有&#x27;,textColor:&#x27;rgba(180, 180, 180, 0.4)&#x27;&#125;&quot;</span>&gt;&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure><h1 id="v-draggable"><a href="#v-draggable" class="headerlink" title="v-draggable"></a>v-draggable</h1><p>需求：实现一个拖拽指令，可在页面可视区域任意拖拽元素。</p><p>思路：</p><ol><li>设置需要拖拽的元素为相对定位，其父元素为绝对定位。</li><li>鼠标按下<code>(onmousedown)</code>时记录目标元素当前的 <code>left</code> 和 <code>top</code> 值。</li><li>鼠标移动<code>(onmousemove)</code>时计算每次移动的横向距离和纵向距离的变化值，并改变元素的 <code>left</code> 和 <code>top</code> 值</li><li>鼠标松开<code>(onmouseup)</code>时完成一次拖拽</li></ol><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">const</span> draggable = &#123;<br>  inserted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">el</span>) </span>&#123;<br>    el.style.cursor = <span class="hljs-string">&#x27;move&#x27;</span><br>    el.onmousedown = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>      <span class="hljs-keyword">let</span> disx = e.pageX - el.offsetLeft<br>      <span class="hljs-keyword">let</span> disy = e.pageY - el.offsetTop<br>      <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>&#123;<br>        <span class="hljs-keyword">let</span> x = e.pageX - disx<br>        <span class="hljs-keyword">let</span> y = e.pageY - disy<br>        <span class="hljs-keyword">let</span> maxX = <span class="hljs-built_in">document</span>.body.clientWidth - <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">window</span>.getComputedStyle(el).width)<br>        <span class="hljs-keyword">let</span> maxY = <span class="hljs-built_in">document</span>.body.clientHeight - <span class="hljs-built_in">parseInt</span>(<span class="hljs-built_in">window</span>.getComputedStyle(el).height)<br>        <span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span>) &#123;<br>          x = <span class="hljs-number">0</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; maxX) &#123;<br>          x = maxX<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (y &lt; <span class="hljs-number">0</span>) &#123;<br>          y = <span class="hljs-number">0</span><br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y &gt; maxY) &#123;<br>          y = maxY<br>        &#125;<br><br>        el.style.left = x + <span class="hljs-string">&#x27;px&#x27;</span><br>        el.style.top = y + <span class="hljs-string">&#x27;px&#x27;</span><br>      &#125;<br>      <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-built_in">document</span>.onmousemove = <span class="hljs-built_in">document</span>.onmouseup = <span class="hljs-literal">null</span><br>      &#125;<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> draggable<br></code></pre></div></td></tr></table></figure><p>使用: 在 Dom 上加上 <code>v-draggable</code> 即可</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;template&gt;<br>  &lt;div <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;el-dialog&quot;</span> v-draggable&gt;&lt;/div&gt;<br>&lt;/template&gt;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作用域插槽</title>
    <link href="/2020/12/27/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/"/>
    <url>/2020/12/27/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h1><p>重点理解掌握作用域插槽，默认插槽和具名插槽简单略过。</p><h1 id="默认插槽"><a href="#默认插槽" class="headerlink" title="默认插槽"></a>默认插槽</h1><ol><li>子组件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">&lt;a<br>        v-bind:href=&quot;url&quot;<br>        class=&quot;nav-link&quot;<br>&gt;<br>    <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span>后备内容，当slot为空当时候默认使用这里的内容<span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><ol start="2"><li>父组件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">navigation-link</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;/profile&quot;</span>&gt;</span><br>    Your Profile<br><span class="hljs-tag">&lt;/<span class="hljs-name">navigation-link</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h1><ol><li>子组件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>一个不带 <code>name</code> 的 <code>&lt;slot&gt;</code> 出口会带有隐含的名字“default”。</p><p>任何没有被包裹在带有 <code>v-slot</code> 的 <code>&lt;template&gt;</code> 中的内容都会被视为默认插槽的内容。</p><ol start="2"><li>父组件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">base-layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:default</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">base-layout</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>渲染结果</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Here might be a page title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">main</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph for the main content.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>And another one.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Here&#x27;s some contact info<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">footer</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h1 id="作用域插槽-（重难点）"><a href="#作用域插槽-（重难点）" class="headerlink" title="作用域插槽 （重难点）"></a>作用域插槽 （重难点）</h1><p>老实说，这个一般主要是用在UI框架上，还有你的子组件千变万化，我写了两年业务代码，没一次用上，但是看到别人的UI框架用到了，你也要知道咋回事。</p><ol><li>子组件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in users&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>                &#123;&#123; user.id &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;first&quot;</span> <span class="hljs-attr">:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>                &#123;&#123; user.firstName &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;last&quot;</span> <span class="hljs-attr">:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>                &#123;&#123; user.lastName &#125;&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&quot;UserList&quot;</span>,</span><br><span class="javascript">        props: [<span class="hljs-string">&#x27;users&#x27;</span>]</span><br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><ol start="2"><li>父组件</li></ol><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">user-list</span> <span class="hljs-attr">:users</span>=<span class="hljs-string">&quot;users&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">user-list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript">    <span class="hljs-keyword">import</span> UserList <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/UserList&quot;</span>;</span><br><br><span class="javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">        name: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br>        components: &#123; UserList &#125;,<br><span class="javascript">        <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">            <span class="hljs-keyword">return</span> &#123;</span><br>                users: [<br><span class="javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;a1&#x27;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;a2&#x27;</span> &#125;,</span><br><span class="javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;b2&#x27;</span> &#125;,</span><br><span class="javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;c1&#x27;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;c2&#x27;</span> &#125;,</span><br>                ]<br>            &#125;<br>        &#125;,<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br>    ul &#123;<br>        list-style-type: none;<br>        padding: 0;<br>    &#125;<br><br>    li &#123;<br>        display: inline-block;<br>        margin: 0 10px;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>我们先不在<code>user-list</code>里写任何内容，那么子组件会按照slot的后备内容进行渲染，渲染如下</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-27_21-41-20.png"></p><p>可以清楚看到子组件就按id ，firstName，lastName来排开了</p><p>下面我来对<code>user-list</code>里自定义渲染内容</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">// 省略不变的代码<br><span class="hljs-tag">&lt;<span class="hljs-name">user-list</span> <span class="hljs-attr">:users</span>=<span class="hljs-string">&quot;users&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;id-label&quot;</span>&gt;</span>&#123;&#123; slotProps.user.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">user-list</span>&gt;</span><br><br>// 省略不变的代码<br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="css">    <span class="hljs-selector-class">.id-label</span>&#123;</span><br>        color: pink;<br>    &#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>看结果</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-27_21-48-50.png"></p><p>可以看到id变颜色了，这是因为我们对数据的自定义渲染生效了。</p><p>看上面的代码，我用了<code>v-slot=&quot;slotProps&quot;</code> 这是对默认插槽起作用的，省略了default，同时来了个等号，取出了此时定义在子组件中对数据。</p><p><code>slotProps.user.id</code> 为什么是 <code>.user</code> ？ 因为子组件中这三行代码</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:user</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>   &#123;&#123; user.id &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在默认插槽中，有一个<code>:user=&quot;user&quot;</code> 就是这个冒号后面的<code>user</code>决定的<code>slotProps.user</code> ，此时就已经拿到了子组件中的这个user数据了，你可以尽情的对这个数据进行任何的渲染。</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-27_22-08-47.png"></p><p>最后来一个完整的例子。</p><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;hello&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">user-list</span> <span class="hljs-attr">:users</span>=<span class="hljs-string">&quot;users&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;id-label&quot;</span>&gt;</span>&#123;&#123; slotProps.user.id &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:first</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;first-label&quot;</span>&gt;</span>&#123;&#123; slotProps.user.firstName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">v-slot:last</span>=<span class="hljs-string">&quot;slotProps&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>&#123;&#123; slotProps.user.lastName &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">user-list</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><br><span class="javascript"><span class="hljs-keyword">import</span> UserList <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/components/UserList&quot;</span>;</span><br><br><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="javascript">  name: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br>  components: &#123; UserList &#125;,<br><span class="javascript">  <span class="hljs-function"><span class="hljs-title">data</span>(<span class="hljs-params"></span>)</span> &#123;</span><br><span class="javascript">    <span class="hljs-keyword">return</span> &#123;</span><br>      users: [<br><span class="javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;a1&#x27;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;a2&#x27;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;b1&#x27;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;b2&#x27;</span> &#125;,</span><br><span class="javascript">        &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;c1&#x27;</span>, <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;c2&#x27;</span> &#125;,</span><br>      ]<br>    &#125;<br>  &#125;,<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br>ul &#123;<br>  list-style-type: none;<br>  padding: 0;<br>&#125;<br><br>li &#123;<br>  display: inline-block;<br>  margin: 0 10px;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.id-label</span> &#123;</span><br>  color: pink;<br>&#125;<br><br><span class="css"><span class="hljs-selector-class">.first-label</span> &#123;</span><br>  height: 20px;<br>  width: 20px;<br>  background: cornflowerblue;<br>  display: inline-block;<br>  margin: 0 20px;<br>&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-27_21-58-13.png"></p><p>最后把源码放上：<a href="https://gitee.com/gdoudeng/vue-slot-demo">vue-slot-demo</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chrome Performance分析</title>
    <link href="/2020/12/26/Chrome-Performance%E5%88%86%E6%9E%90/"/>
    <url>/2020/12/26/Chrome-Performance%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>使用DevTools中的Performance来进行性能分析</p><h1 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h1><p>首先在新的无痕窗口打开网页（这样是为了避免你装的插件导致的影响），打开Chrome DevTools 切换到 Performance 下可以看到以下画面</p><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-33-33.png"></p><ol><li>左上角有个录制按钮，我们可以通过点击它来开始页面分析</li><li>点击最右边的设置的小齿轮图标,如果是移动端项目,打开 CPU 节流开关,根据电脑性能选择相应的(用于模拟手机的性能)</li><li>打开截图 Screenshots 记录过程中每一帧的截图</li></ol><h1 id="记录性能"><a href="#记录性能" class="headerlink" title="记录性能"></a>记录性能</h1><ol><li>点击Record。DevTools会在页面运行时抓取性能相关的各种参数</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-41-00.png"></p><ol start="2"><li>点击Stop。DevTools停止记录，处理数据，展示结果。</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-43-01.png"></p><ol start="3"><li>展现数据</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-44-28.png"></p><h1 id="分析（重点）"><a href="#分析（重点）" class="headerlink" title="分析（重点）"></a>分析（重点）</h1><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-51-24.png"></p><h2 id="桢率"><a href="#桢率" class="headerlink" title="桢率"></a>桢率</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-55-27.png"></p><p>注意看FPS表，如果你看到了一条红色的条条在FPS上方，这证明你的帧速率掉得太低了，已经影响到了用户体验了。总的来说，绿色的条条越高，你的帧速率就越高。</p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_16-57-20.png"></p><p>在CPU图表中的各种颜色与Summary面板里的颜色是相互对应的，Summary面板就在Performance面板的下方。CPU图表中的各种颜色代表着在这个时间段内，CPU在各种处理上所花费的时间。如果你看到了某个处理占用了大量的时间，那么这可能就是一个可以找到性能瓶颈的线索。</p><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-00-18.png"></p><p>在FPS，CPU，NET任意表上移动鼠标，你将看到那个事件点的页面快照，这叫scrubbing，可以用于手动计算动画的进展.</p><h2 id="Frames"><a href="#Frames" class="headerlink" title="Frames"></a>Frames</h2><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-03-15.png"></p><p>鼠标移上去可以读取到当时的帧率。</p><h1 id="定位瓶颈"><a href="#定位瓶颈" class="headerlink" title="定位瓶颈"></a>定位瓶颈</h1><ol><li>先看summary页。在没选中任何事件的时候，该页展示的是活动期间的饼图。当前页面耗时最多是Scripting。Performance是一门减少工作的艺术，所以你的目标就是减少Scripting工作。</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-08-41.png"></p><ol start="2"><li>展开Main图表，Devtools展示了主线程运行状况。X轴代表着时间。每个长条代表着一个event。长条越长就代表这个event花费的时间越长。Y轴代表了调用栈（call<br>stack）。在栈里，上面的event调用了下面的event。</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-12-28.png"></p><ul><li><p>在性能报告中，有很多的数据。可以通过双击，拖动等等动作来放大缩小报告范围，从各种时间段来观察分析报告。</p></li><li><p>在事件长条的右上角出，如果出现了红色小三角，说明这个事件是存在问题的，需要特别注意。</p></li></ul><ol start="3"><li>双击这个带有红色小三角的的事件。在Summary面板会看到详细信息。注意reveal这个链接，双击它会让高亮触发这个事件的event。如果点击了throttle.js?597f:83 这个链接，就会跳转到对应的代码处。</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-16-05.png"></p><ol start="4"><li><p>在wrapper事件下，你会看到一串紫色的事件。如果他们都很宽，这表明好像每一个都应该有个红色三角形。点击随便一个紫色的事件。你将在Summary页下看到关于他的一系列信息。</p></li><li><p>在Summary Tab下，点击下的throttle.js?597f:83。你会看到是哪句代码导致警告。</p></li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-17-47.png"></p><p>好，哪行代码都看到了，你可以去优化了。</p><h1 id="一些事件"><a href="#一些事件" class="headerlink" title="一些事件"></a>一些事件</h1><h2 id="Loading事件"><a href="#Loading事件" class="headerlink" title="Loading事件"></a>Loading事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>Parse HTML</td><td>浏览器执行HTML解析</td></tr><tr><td>Finish Loading</td><td>网络请求完毕事件</td></tr><tr><td>Receive Data</td><td>请求的响应数据到达事件，如果响应数据很大（拆包），可能会多次触发该事件</td></tr><tr><td>Receive Response</td><td>响应头报文到达时触发</td></tr><tr><td>Send Request</td><td>发送网络请求时触发</td></tr></tbody></table><h2 id="Scripting事件"><a href="#Scripting事件" class="headerlink" title="Scripting事件"></a>Scripting事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>Animation Frame Fired</td><td>一个定义好的动画帧发生并开始回调处理时触发</td></tr><tr><td>Cancel Animation Frame</td><td>取消一个动画帧时触发</td></tr><tr><td>GC Event</td><td>垃圾回收时触发</td></tr><tr><td>DOMContentLoaded</td><td>当页面中的DOM内容加载并解析完毕时触发</td></tr><tr><td>Evaluate Script</td><td>A script was evaluated.</td></tr><tr><td>Event</td><td>js事件</td></tr><tr><td>Function Call</td><td>只有当浏览器进入到js引擎中时触发</td></tr><tr><td>Install Timer</td><td>创建计时器（调用setTimeout()和setInterval()）时触发</td></tr><tr><td>Request Animation Frame</td><td>A requestAnimationFrame() call scheduled a new frame</td></tr><tr><td>Remove Timer</td><td>当清除一个计时器时触发</td></tr><tr><td>Time</td><td>调用console.time()触发</td></tr><tr><td>Time End</td><td>调用console.timeEnd()触发</td></tr><tr><td>Timer Fired</td><td>定时器激活回调后触发</td></tr><tr><td>XHR Ready State Change</td><td>当一个异步请求为就绪状态后触发</td></tr><tr><td>XHR Load</td><td>当一个异步请求完成加载后触发</td></tr></tbody></table><h2 id="Rendering事件"><a href="#Rendering事件" class="headerlink" title="Rendering事件"></a>Rendering事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>Invalidate layout</td><td>当DOM更改导致页面布局失效时触发</td></tr><tr><td>Layout</td><td>页面布局计算执行时触发</td></tr><tr><td>Recalculate style</td><td>Chrome重新计算元素样式时触发</td></tr><tr><td>DOMContentLoaded</td><td>当页面中的DOM内容加载并解析完毕时触发</td></tr><tr><td>Scroll</td><td>内嵌的视窗滚动时触发</td></tr></tbody></table><h2 id="Painting事件"><a href="#Painting事件" class="headerlink" title="Painting事件"></a>Painting事件</h2><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>Composite Layers</td><td>Chrome的渲染引擎完成图片层合并时触发</td></tr><tr><td>Image Decode</td><td>一个图片资源完成解码后触发</td></tr><tr><td>Image Resize</td><td>一个图片被修改尺寸后触发</td></tr><tr><td>Paint</td><td>合并后的层被绘制到对应显示区域后触发</td></tr></tbody></table><h1 id="跟Summary-Tab-同级的几个tab"><a href="#跟Summary-Tab-同级的几个tab" class="headerlink" title="跟Summary Tab 同级的几个tab"></a>跟Summary Tab 同级的几个tab</h1><h2 id="Bottom-Up-Tab"><a href="#Bottom-Up-Tab" class="headerlink" title="Bottom-Up Tab"></a>Bottom-Up Tab</h2><p><img src="https://picture-transmission.iplus-studio.top/16522d5a72ccd1e8.jpg"></p><p>在 Timeline 中选取一段时间,然后点击 Bottom-Up得到上图,图片中展示浏览器执行的各个操作说占用的时间</p><h2 id="Call-tree-Tab"><a href="#Call-tree-Tab" class="headerlink" title="Call-tree Tab"></a>Call-tree Tab</h2><p><img src="https://picture-transmission.iplus-studio.top/16522d60f31f4962.jpg"></p><p>同理点击Call Tree 得到上图: 表示浏览器的基本操作(事件执行,绘制…)所占用的时间</p><h2 id="Event-log-Tab"><a href="#Event-log-Tab" class="headerlink" title="Event log Tab"></a>Event log Tab</h2><p><img src="https://picture-transmission.iplus-studio.top/16522d5b3b6a26fb.jpg"></p><p>同理点击 Event Log得到上图: 可以按照选中时间内事件发生的顺序来查看事件执行所占用的时间.</p><h1 id="开启FPS-meter"><a href="#开启FPS-meter" class="headerlink" title="开启FPS meter"></a>开启FPS meter</h1><p>还有一个利器，就是FPS meter了，它提供了一种实时的FPS评估。</p><ol><li>Command+Shift+p（Mac）， Control+Shift+p（windows） 开启命令菜单</li><li>输入Rendering，选择Show Rendering</li><li>在Rendering页，开启FPS Meter。一个新的覆盖窗口将会在你视口的右上角出现。</li></ol><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-26_17-06-48.png"></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>css3动画</title>
    <link href="/2020/12/25/css3%E5%8A%A8%E7%94%BB/"/>
    <url>/2020/12/25/css3%E5%8A%A8%E7%94%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="20210108更新"><a href="#20210108更新" class="headerlink" title="20210108更新"></a>20210108更新</h1><h2 id="怎么监听css3动画结束后的事件"><a href="#怎么监听css3动画结束后的事件" class="headerlink" title="怎么监听css3动画结束后的事件"></a>怎么监听css3动画结束后的事件</h2><p>在执行完一段css3动画后需要进行一些业务操作或者页面操作等等，咋搞呢？</p><p>我们可以使用js来监听两个事件</p><ul><li>动画播放过程会触发两类事件：</li></ul><ol><li><code>AnimationEvent</code></li><li><code>TransitionEvent</code></li></ol><ul><li>动画结束的事件的两个实现分别是：</li></ul><ol><li><code>animationend</code></li><li><code>transitionend</code></li></ol><p>Demo页面在这里，只测试过Chrome</p><p><a href="https://codepen.io/longtian/pen/jEyrzN">https://codepen.io/longtian/pen/jEyrzN</a></p><p>兼容性大坑可以看AngularUI的这部分源码</p><p><a href="https://github.com/angular-ui/bootstrap/blob/7512b93fecb6f27df4f5aeba4c756c0c36aebbf2/src/transition/transition.js#L59">https://github.com/angular-ui/bootstrap/blob/7512b93fecb6f27df4f5aeba4c756c0c36aebbf2/src/transition/transition.js#L59</a></p><p>比如监听一个动画结束</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;div id=<span class="hljs-string">&quot;animend&quot;</span> <span class="hljs-class"><span class="hljs-keyword">class</span></span>=<span class="hljs-string">&quot;floating&quot;</span>&gt;animationend&lt;/div&gt;<br><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;animend&quot;</span>).addEventListener(<span class="hljs-string">&quot;webkitAnimationEnd&quot;</span>, <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>  <span class="hljs-comment">// todo ...</span><br>  <br>    &#125;, <span class="hljs-literal">false</span>);<br></code></pre></div></td></tr></table></figure><h1 id="3个重要属性"><a href="#3个重要属性" class="headerlink" title="3个重要属性"></a>3个重要属性</h1><h2 id="transform-变形"><a href="#transform-变形" class="headerlink" title="transform 变形"></a>transform 变形</h2><blockquote><p>transform（变形）允许你旋转，缩放，倾斜或平移给定元素</p></blockquote><p>拥有 <code>rotate</code> 旋转 <code>skew</code> 扭曲 <code>scale</code> 缩放 <code>translate</code> 移动 <code>matrix</code> 矩阵变形五大特效</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">border</span>: solid red;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">30px</span>, <span class="hljs-number">20px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">20deg</span>);<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">140px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>设置变换中心</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transform-origin</span>: center bottom;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>可选值有<code>left top center  right  bottom</code></p><p>还可以直接写位置<code>50px 50px</code></p><h3 id="scale-缩放"><a href="#scale-缩放" class="headerlink" title="scale 缩放"></a>scale 缩放</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"> <span class="hljs-comment">/*</span><br><span class="hljs-comment">  scale: 缩放</span><br><span class="hljs-comment">  scale(水平放缩比例，垂直放缩比例)；</span><br><span class="hljs-comment">  大于1：放大</span><br><span class="hljs-comment">  小于1：缩小</span><br><span class="hljs-comment">  如果只写一个值等比例缩放</span><br><span class="hljs-comment"> */</span><br><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">0.5</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">scale</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1.5</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="translate-平移"><a href="#translate-平移" class="headerlink" title="translate 平移"></a>translate 平移</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/* translate:(水平位移，垂直位移)；</span><br><span class="hljs-comment">       正值：向右向下</span><br><span class="hljs-comment">       负值：向左向上</span><br><span class="hljs-comment">       如果只写一个值 水平移动</span><br><span class="hljs-comment">       百分比 ：相对于自身移动</span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-comment">/* Single values */</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">100px</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50%</span>);<br><br>    <span class="hljs-comment">/* Two values */</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">100px</span> <span class="hljs-number">200px</span>);<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">50%</span> <span class="hljs-number">105px</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="skew-倾斜"><a href="#skew-倾斜" class="headerlink" title="skew 倾斜"></a>skew 倾斜</h3><blockquote><p>这个CSS属性定义了在2D平面上一个对象的歪斜变换</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/* skew(ax, ay) */</span><br>    <span class="hljs-comment">/* ax 用于沿横坐标扭曲元素的角度 */</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">10deg</span>);<br>    <span class="hljs-comment">/* ay 用于沿纵坐标扭曲元素的角度。如果未定义，则其默认值为0，导致纯水平倾斜 */</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">skew</span>(<span class="hljs-number">10deg</span>, <span class="hljs-number">20deg</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="rotate-X，Y-Z-旋转"><a href="#rotate-X，Y-Z-旋转" class="headerlink" title="rotate X，Y,Z 旋转"></a>rotate X，Y,Z 旋转</h3><blockquote><p>图不就不贴了 随便在一个网址上F12改元素的样式就可以看出来效果</p></blockquote><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/*   </span><br><span class="hljs-comment">    rotate</span><br><span class="hljs-comment">    直接旋转</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">    rotateX</span><br><span class="hljs-comment">    上下旋转</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    rotateY</span><br><span class="hljs-comment">    左右旋转</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    rotateZ</span><br><span class="hljs-comment">    旋转的</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>rotateZ和rotate看起来效果一样</p><h3 id="translate-X-Y-Z-平移"><a href="#translate-X-Y-Z-平移" class="headerlink" title="translate X,Y,Z 平移"></a>translate X,Y,Z 平移</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">body</span> &#123;<br>    <span class="hljs-comment">/* 透视*/</span><br>    <span class="hljs-attribute">perspective</span>: <span class="hljs-number">600px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.box</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-comment">/* translateZ必须配合透视来使用*/</span><br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateZ</span>(<span class="hljs-number">400px</span>);<br>&#125; <br></code></pre></div></td></tr></table></figure><p>translate和translateX看起来效果一样</p><h2 id="transition-过渡"><a href="#transition-过渡" class="headerlink" title="transition 过渡"></a>transition 过渡</h2><blockquote><p>拥有修改执行变换的属性，时长，速率和延迟时间的能力</p></blockquote><p><img src="https://picture-transmission.iplus-studio.top/Snipaste_2020-12-25_17-20-10.png"></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/* Apply to 1 property */</span><br>    <span class="hljs-comment">/* property name | duration */</span><br>    <span class="hljs-attribute">transition</span>: margin-right <span class="hljs-number">4s</span>;<br><br>    <span class="hljs-comment">/* property name | duration | delay */</span><br>    <span class="hljs-attribute">transition</span>: margin-right <span class="hljs-number">4s</span> <span class="hljs-number">1s</span>;<br><br>    <span class="hljs-comment">/* property name | duration | timing function */</span><br>    <span class="hljs-attribute">transition</span>: margin-right <span class="hljs-number">4s</span> ease-in-out;<br><br>    <span class="hljs-comment">/* property name | duration | timing function | delay */</span><br>    <span class="hljs-attribute">transition</span>: margin-right <span class="hljs-number">4s</span> ease-in-out <span class="hljs-number">1s</span>;<br><br>    <span class="hljs-comment">/* Apply to 2 properties */</span><br>    <span class="hljs-attribute">transition</span>: margin-right <span class="hljs-number">4s</span>, color <span class="hljs-number">1s</span>;<br><br>    <span class="hljs-comment">/* Apply to all changed properties */</span><br>    <span class="hljs-attribute">transition</span>: all <span class="hljs-number">0.5s</span> ease-out;<br><br>    <span class="hljs-comment">/* Global values */</span><br>    <span class="hljs-attribute">transition</span>: inherit;<br>    <span class="hljs-attribute">transition</span>: initial;<br>    <span class="hljs-attribute">transition</span>: unset;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><ul><li>指定transition效果的转速曲线</li></ul><p>指定为一个或多个 CSS 属性的过渡效果，多个属性之间用逗号进行分隔。</p><p><code>transition-timing-function: linear | ease | ease-in | ease-out | ease-in-out | cubic-bezier(n, n, n, n);</code></p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>linear</td><td>规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td>ease</td><td>规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td>ease-in</td><td>规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td>ease-out</td><td>规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td>ease-in-out</td><td>规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td>cubic-bezier(n,n,n,n)</td><td>在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table><ul><li>指定动画延迟时间</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transition-delay</span>: <span class="hljs-number">0.8s</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>指定CSS属性的name，transition效果</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transition-property</span>: width;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>transition效果需要指定多少秒或毫秒才能完成</li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-attribute">transition-duration</span>: <span class="hljs-number">1s</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="animation-重难点"><a href="#animation-重难点" class="headerlink" title="animation 重难点"></a>animation 重难点</h2><blockquote><p>若将Transform解释为动作，Transition解释为过渡，那么Animation则是连续的几个动作，即动画。Animation可以我们设定keyframes的值，让元素在一段时间内完成多个动作。</p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p><code>animation</code> :   name   duration timing-function delay iteration-count direction   fill-mode        play-state<br><code>animation</code> : 动画名称  持续时间        运动曲线    延迟执行    执行次数      方向    动画结束后元素应该在的位置    动画状态    </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<br>    <span class="hljs-comment">/* animation属性详解*/</span><br>    <span class="hljs-comment">/* 动画名称*/</span><br>    <span class="hljs-attribute">animation-name</span>: move;<br><br>    <span class="hljs-comment">/* 一次动画持续时间  前两属性是必须，且顺序固定*/</span><br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">3s</span>;<br><br>    <span class="hljs-comment">/* 动画执行次数  无数次：infinite*/</span><br>    <span class="hljs-attribute">animation-iteration-count</span>: <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">/* 动画的方向： normal 正常 ， alternate： 反向*/</span><br>    <span class="hljs-attribute">animation-direction</span>: alternate;<br><br>    <span class="hljs-comment">/* 动画延迟执行*/</span><br>    <span class="hljs-attribute">animation-delay</span>: <span class="hljs-number">1s</span>;<br><br>    <span class="hljs-comment">/* 设置动画结束盒子盒子的状态</span><br><span class="hljs-comment">           forwards：保持动画结束后的状态  backwards：保持动画开始前的状态*/</span><br>    <span class="hljs-attribute">animation-fill-mode</span>: forwards;<br><br>    <span class="hljs-comment">/* 运动曲线  linear   ease-in-out  steps()*/</span><br>    <span class="hljs-comment">/*animation-timing-function:ease-in;*/</span><br><br>    <span class="hljs-attribute">animation-timing-function</span>: <span class="hljs-built_in">steps</span>(<span class="hljs-number">8</span>);<br><br>    <span class="hljs-comment">/* 控制动画状态 paused 暂停  running　播放*/</span><br>    <span class="hljs-attribute">animation-play-state</span>: paused;<br>&#125;<br></code></pre></div></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>animation-name</td><td>指定 @keyframes 动画的名称。</td></tr><tr><td>animation-duration</td><td>指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0。</td></tr><tr><td>animation-timing-function</td><td>指定动画计时函数，即动画的速度曲线，默认是 “ease”。</td></tr><tr><td>animation-delay</td><td>指定动画延迟时间，即动画何时开始，默认是 0。</td></tr><tr><td>animation-iteration-count</td><td>指定动画播放的次数，默认是 1。</td></tr><tr><td>animation-direction</td><td>指定动画播放的方向。默认是 normal。</td></tr><tr><td>animation-fill-mode</td><td>指定动画填充模式。默认是 none。</td></tr><tr><td>animation-play-state</td><td>指定动画播放状态，正在运行或暂停。默认是 running</td></tr></tbody></table><p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意</p><p>一个例子：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-class">.box</span> &#123;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">100px</span>;<br>    <span class="hljs-attribute">background-color</span>: green;<br>    <span class="hljs-comment">/* 调用*/</span><br>    <span class="hljs-comment">/* infinite:无限次*/</span><br>    <span class="hljs-comment">/* animation: 动画名称 持续时间  执行次数  是否反向  运动曲线 延迟执行*/</span><br>    <span class="hljs-comment">/*animation: move 1s  alternate linear 3 ;*/</span><br>    <span class="hljs-attribute">animation</span>: gun <span class="hljs-number">4s</span>;<br>&#125;<br><br><span class="hljs-comment">/* 定义动画*/</span><br><span class="hljs-keyword">@keyframes</span> move &#123;<br>    <span class="hljs-selector-tag">from</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">0deg</span>);<br>    &#125;<br>    <span class="hljs-selector-tag">to</span> &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">500px</span>) <span class="hljs-built_in">rotate</span>(<span class="hljs-number">555deg</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/* 定义多组动画*/</span><br><span class="hljs-keyword">@keyframes</span> gun &#123;<br>    0% &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0px</span>);<br>        <span class="hljs-attribute">background-color</span>: green;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;<br>    &#125;<br><br>    25% &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">500px</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0px</span>);<br>    &#125;<br><br>    50% &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">500px</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">300px</span>);<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span>;<br>    &#125;<br><br><br>    75% &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">300px</span>);<br>    &#125;<br><br>    100% &#123;<br>        <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translateX</span>(<span class="hljs-number">0px</span>) <span class="hljs-built_in">translateY</span>(<span class="hljs-number">0px</span>);<br>        <span class="hljs-attribute">background-color</span>: red;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="animation-timing-function"><a href="#animation-timing-function" class="headerlink" title="animation-timing-function"></a>animation-timing-function</h3><p>常见值有：<code>linear、ease、ease-in、ease-out、ease-in-out</code>。</p><p>这些值其实都是 <code>cubic-bezier(n,n,n,n)</code> 的特例。它们被称为贝塞尔曲线。</p><p>一个在线调试贝塞尔曲线的网站：<a href="https://cubic-bezier.com/#.17,.67,.83,.67">cubic-bezier.com</a>。</p><h3 id="animation-fill-mode-重点"><a href="#animation-fill-mode-重点" class="headerlink" title="animation-fill-mode (重点)"></a>animation-fill-mode (重点)</h3><p>除了默认值 <code>none</code> 外，还有另外 3 个值：</p><ul><li><code>forwards</code>，表示，动画完成后，元素状态保持为最后一帧的状态。</li><li><code>backwards</code>，表示，有动画延迟时，动画开始前，元素状态保持为第一帧的状态。 </li><li><code>both</code>，表示上述二者效果都有。</li></ul><p>这个贴个图理解一下</p><p>举个例子，div 从 100px 处移动到 200px 处的关键帧定义为：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-keyword">@keyframes</span> move&#123;<br>  0%&#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">100px</span>,<span class="hljs-number">0</span>);<br>  &#125;<br>  100%&#123;<br>    <span class="hljs-attribute">transform</span>: <span class="hljs-built_in">translate</span>(<span class="hljs-number">200px</span>,<span class="hljs-number">0</span>);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>设置填充模式为 <code>forwards</code> 时，动画最后停留在 200px 处：</p><p><img src="https://picture-transmission.iplus-studio.top/16ac0310ff7ba99a.gif"></p><p>设置动画延迟 1s 后执行，且填充模式为 <code>backwards</code> 时，可以看到动画在开始前是处于 100px 处，动画结束后回到 0px 处：</p><p><img src="https://picture-transmission.iplus-studio.top/16ac035a53f40b08.gif"></p><p>最后设置填充模式为 <code>both</code> 的情形：</p><p><img src="https://picture-transmission.iplus-studio.top/16ac0380ae444be8.gif"></p><p>动画结束后，保持动画最后一帧的状态，这个太有用了.</p><p>一个例子</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span>&#123;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid;<br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(#<span class="hljs-number">0</span>ff,#<span class="hljs-number">0</span>ff);<br>    <span class="hljs-attribute">background-repeat</span>: no-repeat;<br>    <span class="hljs-attribute">background-size</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">animation</span>: move <span class="hljs-number">2s</span> linear forwards;<br>&#125;<br><br><span class="hljs-keyword">@keyframes</span> move&#123;<br>    100%&#123;<br>        <span class="hljs-attribute">background-size</span>: <span class="hljs-number">100%</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><img src="https://picture-transmission.iplus-studio.top/16ac0435e14da43a.gif"></p><h3 id="animation-delay"><a href="#animation-delay" class="headerlink" title="animation-delay"></a>animation-delay</h3><p>不为大家注意的是，延迟可以为负数。负延迟表示动画仿佛开始前就已经运行过了那么长时间。<br>拿上述进度条为例子，原动画用了 2s 是从 0% 加载到 100% 的。如果设置延迟为 -1s。这动画会从 50% 加载到 100%。仿佛已经运行了 1s 一样：</p><p><img src="https://picture-transmission.iplus-studio.top/16ac04adc7f87ab6.gif"></p><h3 id="animation-play-state"><a href="#animation-play-state" class="headerlink" title="animation-play-state"></a>animation-play-state</h3><p>CSS 动画是可以暂停的。属性 animation-play-state 表示动画播放状态，默认值 <code>running</code> 表示播放， <code>paused</code> 表示暂停</p><p><img src="https://picture-transmission.iplus-studio.top/16ac050679097040.gif"></p><h3 id="animation-iteration-count"><a href="#animation-iteration-count" class="headerlink" title="animation-iteration-count"></a>animation-iteration-count</h3><p>表示动画播放次数。它很好懂，只有一点要注意，无限播放时使用 infinite</p><h3 id="animation-direction"><a href="#animation-direction" class="headerlink" title="animation-direction"></a>animation-direction</h3><p>它的意思说指定动画按照指定顺序来播放 @keyframes 定义的关键帧</p><ul><li><p><code>normal</code> 默认值。</p></li><li><p><code>reverse</code> 表示动画反向播放。</p></li><li><p><code>alternate</code> 表示正向和反向交叉进行。</p></li><li><p><code>alternate-reverse</code> 表示反向和正向交叉进行。</p><p>这个自己动手在浏览器改下样式更容易理解</p></li></ul><p>最后附带一个代码 <a href="https://gitee.com/gdoudeng/css3-animation.git">css3动画</a></p><p>还有几个参考动画<a href="https://webdesign.tutsplus.com/zh-hans/articles/15-inspiring-examples-of-css-animation-on-codepen--cms-23937">15个CodePen上启发灵感的CSS动画案例</a></p><p>一个动画库<a href="https://animate.style/">AnimateCss</a></p><p>一个动画可视化编辑工具网址<a href="https://angrytools.com/css/animation/">AnimationKit</a></p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/12/15/hello-world/"/>
    <url>/2020/12/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
